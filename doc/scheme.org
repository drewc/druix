#+TITLE: Schemes for all!

We _love_ the scheme language on the *bleedin' edge*.

* Gambit: ~gsi~, a Scheme interpreter, and ~gsc~, the Scheme compiler.



* Add First "gambit-unstable" package


** Find the hash

*** First attempt, use the shell!

#+begin_src shell
cd ~/me/guix/src/
git clone --depth=1 https://github.com/gambit/gambit.git
cd gambit

_GambcSHA=`git log -1 --format="%H"`
_GambcHASH=$(guix hash -xr "`pwd`")
echo main: $_GambcSHA  hash: $_GambcHASH
#+end_src

: main: 1d5b01330881b3e26345dbaabfd35bbdfae36330
: hash: 17f1zyvs0qazqbqczbsspqrz2vzsabg8kbz2xf1z5x6xxxvkqimc




*** Final task: Generate a ~gambit-unstable-version.scm~ file.

    #+begin_src scheme
(define (git-generate-version-scm-file repo module-name path)
  (define mod `(define-module ,module-name #:export (commit sha256 revision)))
  (define com.256 (git-repo-get-commit-and-sha256))

  (with-output-to-file path
    (lambda ()
      (write mod) (newline)
      (write `(define commit ,(car com.256))) (newline)
            ))


    #+end_src
#+begin_src scheme :untangle ./src/druix/druix/packages/scheme/gambit-c-main.scm
(define-module (druix gambit-c-main))


#+end_src

** Make the build build

When first trying it out it fails with:

 : cp gsc-boot.unix gsc-boot
 : cp: cannot create regular file 'gsc-boot': Permission denied

 I suppose that's somehow because the source tree is not writable?

https://guix.gnu.org/manual/en/html_node/Build-Phases.html lists some phases and has a great example.

#+begin_src scheme
(define-public example
  (package
    (name "example")
    ;; other fields omitted
    (build-system gnu-build-system)
    (arguments
     '(#:phases (modify-phases %standard-phases
                  (delete 'configure)
                  (add-before 'build 'set-prefix-in-makefile
                    (lambda* (#:key outputs #:allow-other-keys)
                      ;; Modify the makefile so that its
                      ;; 'PREFIX' variable points to "out".
                      (let ((out (assoc-ref outputs "out")))
                        (substitute* "Makefile"
                          (("PREFIX =.*")
                           (string-append "PREFIX = "
                                          out "\n")))
                        #true))))))))
#+end_src

So, what if we somehow use that? Let's [[https://guix.gnu.org/en/manual/devel/en/guix.html#File-Manipulation][manipulate some files]].

In doing so, and investigating a wee bit further, it turns out that ~Gambit~,
like almost all *Scheme* and/or *Lisp* implementations, is implemented in
itself.

When checked out as a git archive is looks for the last "stable" version and builds a `bootstrap` version of that.

But, ~guix build~ and friends among other things, does not include the ~.git~ in
the source tree and does not have it even installed by default at build time.

But!!! We can simple make our own ~gambit-c-unstable@bootstrap~ package.

#+begin_src scheme :noweb-ref gambit-c-bootstrap
(define-public gambit-c-unstable-bootsource
  (package
    (inherit gambit-c)
    (name "gambit-c-unstable")
    (version "4.9.3-bootsource")
    (arguments
     '(; #:out-of-source? #t
       #:phases (modify-phases %standard-phases
                  (add-before 'build 'copy-source
                    (lambda* (#:key outputs #:allow-other-keys)
                      (let* ((out (assoc-ref outputs "out")))
                        (copy-recursively "." (string-append out "/boot")))
                      #true))
                  ;(delete 'patc    h-source-shebangs)
                  ;(delete 'check)
                  (replace 'build
                    (lambda* (#:key #:allow-other-keys)
                      (invoke "make" "bootstrap")
                      #true)))))))
#+end_src


Now, essentially, we just need to copy that entire directory over to ~./boot/~
in the source directory.

#+begin_src scheme :tangle ../druix/packages/scheme/gambit-c-unstable.scm :noweb yes :mkdirp t
(define-module (druix packages scheme gambit-c-unstable)
  #:use-module (gnu packages)
  #:use-module (guix git-download)
  #:use-module (gnu packages scheme)
  #:use-module (guix build utils))


(use-modules (guix packages)
             (guix download)
             (guix build utils)
             (gnu packages scheme)
             (gnu packages tls)
             (gnu packages rsync)
             (gnu packages version-control)
             (gnu packages compression))

<<gambit-c-bootstrap>>

(define gambit-c-main-sha1
  "1d5b01330881b3e26345dbaabfd35bbdfae36330")
(define gambit-c-main-hash "17f1zyvs0qazqbqczbsspqrz2vzsabg8kbz2xf1z5x6xxxvkqimc")
(define (gambc-configure-flags)
  '("--enable-single-host"
    "--enable-targets=js"
    "--enable-c-opt=-O1"
    "--enable-gcc-opts"
    "--enable-shared"
    "--enable-abolute-shared-libs"
    "--enable-openssl"
    ))

(define-public gambit-c-unstable
  (package
    (inherit gambit-c)
    (name "gambit-c-unstable")
    (version "0-unstable")
    (source
     (origin
       (method git-fetch)
       (uri (git-reference
             (url "https://github.com/gambit/gambit.git")
             (commit gambit-c-main-sha1)))
       (file-name (git-file-name name gambit-c-main-sha1))
       (sha256 (base32 gambit-c-main-hash))))
    (arguments
     `(; #:out-of-source? #t
       #:phases (modify-phases %standard-phases
                  (add-before 'configure 'sub-new-version
                    (lambda* (#:key outputs #:allow-other-keys)
                      (substitute* "configure"
                        (("^PACKAGE_VERSION=.*$")
                         (string-append "PACKAGE_VERSION=\"v4.9.3-" "1d5b01330" "\"\n"))
                        (("^PACKAGE_STRING=.*$")
                         (string-append "PACKAGE_STRING=\"Gambit v4.9.3-" "1d5b01330" "\"\n")))
                      ))
                  ;(delete 'patch-source-shebangs)
                  (replace 'build
                    (lambda* (#:key outputs #:allow-other-keys)
                      (let ((bs (dirname
                                  (string-append (dirname (which "gsi"))
                                                 "../")))
                            (gsc-boot (which "gsc")))
                        (invoke "cat" "makefile")
                      (invoke "rsync" "-rt"
                              (string-append bs "/boot/") "boot/")
                      (invoke "chmod" "-R" "u+rw" "./")
                      (invoke "cp" gsc-boot "boot/gsc-boot")
                      (invoke "sh" "-c" "export CONFIG_SHELL=`which bash` ;
 cp config.guess boot; cp config.sub boot; cd boot && \
 rm -f gsc/makefile && \
 cp ../gsc/makefile.in ../gsc/*.scm gsc && ./configure && \
 for i in lib gsi gsc ; do (cd $i ; echo 'making' $i ; find . ; make ) ; done
  ")
                      (invoke "cp" "boot/gsc/gsc" "gsc-boot")
                      (invoke "ls" "gsc-boot" "-l")
                      (invoke "./gsc-boot" "-v")
                      (invoke "make" "bootclean")
                      (invoke "make" "all")
                      #true))))
       #:configure-flags '("--enable-single-host"
                           "--enable-targets=js"
                           "--enable-c-opt=-O1"
    "--enable-gcc-opts"
    "--enable-shared"
    "--enable-abolute-shared-libs"
    "--enable-openssl"

                           )
      ))
   (native-inputs `(("unzip" ,unzip)
                    ("rsync" ,rsync)
                    ("boot", gambit-c-unstable-bootsource)
                    ("openssl" ,openssl)))))

#+end_src

* Jedi mind tricks

#+begin_src shell
uname -a
# => Linux guyix 5.11.21 #1 SMP 1 x86_64 GNU/Linux
guix install libx11 glew
cd ~/me/guix/src/; git clone git://github.com/jazzscheme/jedi.git && cd jedi
git clone https://github.com/jazzscheme/jazz && cd jazz && git checkout bongo &&
cd ..
export GAMBITDIR=$(cd $(dirname `which gsc`)/../ && pwd)

./jaz make @develop

#+end_src
