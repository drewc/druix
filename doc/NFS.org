#+TITLE: NFS client service

Guix SD seems to be lacking NFS mounting as a part of the ~operating-system~ thingie. Here's an attempt to make it so.

* The initial requirements

I have another service that I only want to launch when the NFS is mounted. But how/when such a thing happens is odd, especially for a laptop.

Every *NFS* server may or may not be up at any given time.

Now, it does seem that ~mount.nfs~ has an ability to retry, but it seems to lock ~df~ while doing so, so we're going to write our own simple daemon.


** Is the NFS server there?
#+begin_src scheme
    (use-modules (gnu system file-systems))
#+end_src

Let's get the host from the file system
#+begin_src scheme :noweb-ref host<-file-system
  (define (host<-file-system fs)
    (let* ((source (file-system-device fs))
           (idx (string-rindex source #\:))
           (host-part (string-take source idx))
           ;; Strip [] from around host if present
           (host (match (string-split host-part (string->char-set "[]"))
                   (("" h "") h)
                   ((h) h))))
      host))
#+end_src

Now does it exist?

#+begin_src scheme :noweb-ref host-exists?
  (define (host-exists? host)
    (define (host?) (getaddrinfo host))
    (with-exception-handler
        (const #f)
      host?
      #:unwind? #t))
#+end_src


* Shepherd Services

They all come together here.

#+begin_src scheme :noweb-ref shepherd-service
  (define (nfs-client-shepherd-services file-systems)
    (define (shep-serv fs)
      (let* ((fss (nfs-file-system-shepherd-service fs))
             (cname (and fss (shepherd-service-canonical-name fss)))
             (mounts (and cname (nfs-mount-shepherd-service fs cname))))
        (if fss (list mounts fss) '())))
                                          ;
    (apply append (map shep-serv file-systems)))

#+end_src

** ~nfs-file-system-shepherd-service~

I like the idea of having a service with the same shepherd name as ~file-systems~
service for the same fs.

So, why not use the same service? :)

#+begin_src scheme :noweb-ref shepherd-service
    (define (nfs-file-system-shepherd-service file-system)
      (let* ((ss (@@ (gnu services base) file-system-shepherd-service))
             (fsss (ss file-system))
             (target  (file-system-mount-point file-system))
             (create? (file-system-create-mount-point? file-system))
             (mount?  (file-system-mount? file-system)))
        (and (or mount? create?)
             (with-imported-modules (source-module-closure
                                     '((gnu build file-systems)))
               (shepherd-service
                (inherit fsss)
                (documentation "Mount (via fstab) and unmount the given file system.")
                (auto-start? #f)
                (start
                 #~(lambda args
                     #$(if create?
                           #~(mkdir-p #$target)
                           #t)
                     #$(if mount?
                           #~(system*
                            #$(file-append util-linux "/bin/mount")
                            "--target" #$target)
                           #t)
                     #t)))))))
#+end_src

** The daemon: ~(nfs-mount-daemon file-system herd-name)~

Because we've placed all the details in the */etc/fstab* we only need to supply the host and the target to make it work the way I want to.

#+begin_src scheme :noweb-ref nfs-client-daemon :noweb yes
  (define (nfs-mount-daemon file-system cname)
    #~(begin
        (use-modules (ice-9 format))
        (define target #$(file-system-mount-point file-system))
        (define host #$(host<-file-system file-system))
        (define (mountpoint)
          (system* #$(file-append util-linux "/bin/mountpoint")
                   target))

        (define (herd-me)
          (system* #$(file-append shepherd "/bin/herd")
                   "restart" (symbol->string '#$cname)))

        (define timein 5)         ; the number of seconds to wait between attempts
        (define (sleep-me)
          (sleep
           (cond
            ((< timein 20) (let ((ti timein)) (set! timein (* 2 timein)) ti))
            ((< timein 25) (set! timein (+ 1 timein)) timein)
            ((= 25 timein) (set! timein 30) timein)
            ((< timein 120) (let ((ti timein)) (set! timein (* 2 timein)) ti))
            ((>= timein 120) timein))))


        (define (log . args) (format #t "~a: ~{~a~}\n" target args))

        <<host-exists?>>

        (while #t
           (if (eq? 5 timein)
               (log "Starting Investigation for " target " and " '#$cname
                    "\n mounted?" (mountpoint) "  "
                    (host-exists? host) " <--Host exists?")
               (log "Still trying after " timein " seconds"))
          (cond
           ((zero? (mountpoint))
            (sleep-me))
            ((host-exists? host)
             (log "host "host" exists. Running herd start " '#$cname)
             (herd-me) (sleep-me))
           (#t
  ;;; We will respawn, but we are only allowed so many before it
  ;;; disables the service it seems. Let's sleep a bit.
            (sleep 10)
            (exit 0))))))
#+end_src
** The ~nfs-mount-shepherd-service~

#+begin_src scheme :noweb-ref shepherd-service

  (define (nfs-mount-shepherd-service file-system cname)
    (let* ((daemon
            (program-file
             "nfs-client-daemon" (nfs-mount-daemon file-system cname))))
      (with-imported-modules
          (source-module-closure
           '((guix build syscalls)
             (ice-9 format)))
        (shepherd-service
         (provision (list (string->symbol (format #f "nfs-mount-~a" cname))))
         (requirement (list 'file-systems 'networking))
         (start #~(lambda args
                    (define target #$(file-system-mount-point file-system))
                    (define (mountpoint)
                      (system* #$(file-append util-linux "/bin/mountpoint")
                               target))

                    (system "echo Trying to mount or keep trying nfs >> /tmp/nfs.log")
                    (if (zero? (mountpoint))
                        #t
                        (apply (make-forkexec-constructor
                                (list #$daemon)
                                #:log-file "/tmp/nfs.log")
                               args))))
         (stop #~(make-kill-destructor))))))
#+end_src

* Usage

* The ~nfs-client-service-type~ service

#+begin_src scheme :tangle ../druix/services/nfs-client.scm :noweb yes
  (define-module (druix services nfs-client)
    #:use-module (gnu services)
    #:use-module (gnu services base)
    #:use-module (gnu services shepherd)
    #:use-module (gnu packages admin)
    #:use-module (gnu)
    #:use-module (ice-9 match)
    #:use-module (ice-9 format)
    #:export (nfs-client-service-type))
  (use-modules (guix modules))   ;for 'source-module-closure'
  (use-modules (gnu packages linux))   ;for 'util-linux'

  <<host<-file-system>>

  <<nfs-client-daemon>>

  <<shepherd-service>>

  (define nfs-client-service-type
    (service-type
     (name 'nfs-client)
     (extensions
      (list  (service-extension shepherd-root-service-type
                                nfs-client-shepherd-services)
             (service-extension fstab-service-type identity)
             ;; (service-extension file-system-service-type
             ;;                    nfs-file-systems)
             ))
     (description "NFS client for file-systems")))







#+end_src

#+begin_src sh
  sudo herd status
#+end_src
