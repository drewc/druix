#+TITLE: Druix Cookbook: recipes both tested and in progress


* NGINX and LetsEncypt

https://notabug.org/jbranso/linode-guix-system-configuration/src/master/linode-locke-lamora-current-config.scm was a big help.

#+begin_src shell
sudo mkdir -p /srv/http/music-make.rs
#+end_src
#+begin_src scheme

(use-modules (gnu services web))
(use-service-modules
 certbot web
 desktop networking ssh xorg databases nix docker virtualization)
        ; ...
        ;
(define %nginx-deploy-hook
  (program-file
   "nginx-deploy-hook"
   #~(let ((pid (call-with-input-file "/var/run/nginx/pid" read)))
       (kill pid SIGHUP))))

(operating-system
                                       ; ...
  (services
   (append
                                        ; ...
    (service certbot-service-type
                      (certbot-configuration
                       (email "drewc@music-make.rs")
                       (webroot "/srv/http")
                       (certificates
                        (list
                         (certificate-configuration
                          (name "music-make.rs")
                          (domains '("*.music.make.rs" "music-make.rs"))
                          (deploy-hook %nginx-deploy-hook))))))
    (service nginx-service-type
              (nginx-configuration
               (server-blocks
                (list (nginx-server-configuration
                       (server-name '("local.music-make.rs"))
                       (listen '("80" "443 ssl http2"
                                 "[::]:80" "[::]:443 ssl http2"))
                       (ssl-certificate "/etc/letsencrypt/live/music-make.rs/fullchain.pem")
                       (ssl-certificate-key "/etc/letsencrypt/live/music-make.rs/privkey.pem")
                       (root "/srv/http/music-make.rs")
                       (locations
                        (list
                         (nginx-location-configuration ;certbot
                          (uri "/.well-known")
                          (body (list "root /srv/http;"))))))))))
    (service nginx-service-type
             (nginx-configuration
              (server-blocks
               (list (nginx-server-configuration
                      (server-name '("*.music-make.rs"))
                      (root "/srv/http/music-make.rs")))))))))


#+end_src


* Run Nix on top of DruixSD

For many things we need nix working. For now. So, let's do it!

As luck would have it, as for many things, there is an existing service.

[[https://guix.gnu.org/manual/en/html_node/Miscellaneous-Services.html#Nix-service][The Nix Service]].

The ~(gnu services nix)~ module provides ~nix-service-type~.

#+begin_src scheme
(use-modules (gnu))
(use-service-modules nix)
(use-package-modules package-management)

(operating-system
  ;; â€¦
  (packages (append (list nix)
                    %base-packages))

  (services (append (list (service nix-service-type))
                    %base-services)))

#+end_src

Then ~sudo guix system reconfigure~ and configure Nix for your user.

 1) Add a Nix channel and update it.
      #+begin_src shell
nix-channel --add https://nixos.org/channels/nixpkgs-unstable
nix-channel --update
# => unpacking channels...
#    created 1 symlinks in user environment
      #+end_src

 2) Create a symlink to your new nix profile and activate it.

#+begin_src shell
ln -s "/nix/var/nix/profiles/per-user/$USER/profile" ~/.nix-profile
source /run/current-system/profile/etc/profile.d/nix.sh
#+end_src

** Run "Google Chrome" or "Vivaldi" from Nix

#+begin_src shell
guix install fontconfig gs-fonts

nix-env -iA nixpkgs.vivaldi nixpkgs.vivaldi-ffmpeg-codecs nixpkgs.vivaldi-widevine

export FONTCONFIG_PATH="~/.guix-profile/etc/fonts/fonts.conf"
vivaldi &
#+end_src

Here's a shebang to make it work wonders:

#+begin_src shell
#!/usr/bin/env bash
source /run/current-system/profile/etc/profile.d/nix.sh
export FONTCONFIG_FILE="/home/$USER/.guix-profile/etc/fonts/fonts.conf"
vivaldi $@
#+end_src


* Publish Druix, share the store!

"The purpose of ~guix publish~ is to enable users to easily share their store with others, who can then use it as a substitute server"
--https://guix.gnu.org/manual/en/html_node/Invoking-guix-publish.html

I want to compile things away from my main workstation and have them shared. This is the key to that.


** Keypair

*Guix* is nice and secure and thus things need signatures that verify their upcomance.

As luck would have it we automagically have ours as they are autogened at first run of our Guix SD systems. Otherwise, ~guix archive --generate-key~.

See [[https://guix.gnu.org/manual/en/html_node/Invoking-guix-archive.html][Invoking guix archive]].

** First try: At terminal

Inside ~tmux~ we simply run it.

#+begin_src shell
sudo guix publish --user=drewc
# guix publish: publishing /gnu/store on 0.0.0.0, port 8080
# guix publish: using 'gzip' compression method, level 3
#+end_src

** On another box: Authorize it

I've made the ~guix.drewc.ca~ DNS address for that server.

#+begin_src shell
wget -O - http://guix.drewc.ca:8080/signing-key.pub > ~/druix/druix-key.pub
#+end_src

Then we add that to our config.scm

#+begin_src scheme
(modify-services %base-services
  (guix-service-type config =>
                     (guix-configuration
                      (inherit config)
                      (substitute-urls
                       (append (list "http://guix.drewc.ca:8080/")
                               %default-substitute-urls))
                      (authorized-keys
                       (append (list (local-file "./druix-key.pub"))
                               %default-authorized-guix-keys)))))
#+end_src

And make it so!

#+begin_src shell
sudo guix system reconfigure ~/druix/druix-config.scm
sudo herd restart guix-daemon
#+end_src

*** The conf file
#+begin_src scheme :tangle "cookbook/druix-config.scm.publish"
(use-modules (gnu)
             (guix modules))
(use-service-modules networking
                     ssh)
(use-package-modules admin
                     certs
                     package-management
                     ssh
                     tls)

(operating-system
  (host-name "druix-pub")
  (timezone "America/Vancouver")
  (locale "en_CA.UTF-8")
  ;; This goofy code will generate the grub.cfg
  ;; without installing the grub bootloader on disk.
  (bootloader (bootloader-configuration
               (bootloader
                (bootloader
                 (inherit grub-bootloader)
                 (installer #~(const #true))))))
  (file-systems (cons (file-system
                        (device "/dev/sda")
                        (mount-point "/")
                        (type "ext4"))
                      %base-file-systems))
  (swap-devices (list "/dev/sdb"))


  (initrd-modules (cons "virtio_scsi"    ; Needed to find the disk
                        %base-initrd-modules))

  (users (cons (user-account
                (name "drewc")
                (group "users")
                ;; Adding the account to the "wheel" group
                ;; makes it a sudoer.
                (supplementary-groups '("wheel"))
                (home-directory "/home/drewc"))
               %base-user-accounts))

  (packages (cons* nss-certs            ;for HTTPS access
                   openssh-sans-x
                   %base-packages))

  (services (cons*
             (service dhcp-client-service-type)
             (service openssh-service-type
                      (openssh-configuration
                       (openssh openssh-sans-x)
                       (password-authentication? #false)
                       (authorized-keys
                        `(("drewc" ,(local-file "./drewc_rsa.pub"))
                          ("root" ,(local-file "./drewc_rsa.pub"))))))
             (modify-services %base-services
               (guix-service-type config =>
                                  (guix-configuration
                                   (inherit config)
                                   (substitute-urls
                                    (append (list "http://guix.drewc.ca:8080/")
                                            %default-substitute-urls))
                                   (authorized-keys
                                    (append (list (local-file "./druix-key.pub"))
                                            %default-authorized-guix-keys))))))))
#+end_src


* Running Druix on a Linode Server

As luck would have it I already use [[https://www.linode.com/][Linode]] and have installed a few different
OS's on that platform so this is fairly easy. I already have an ssh key that I
use like a [[#catSSH][cat.]]

Also, more luck, Guix outlines it [[http://guix.gnu.org/en/cookbook/en/html_node/Running-Guix-on-a-Linode-Server.html][in detail.]]

We'll follow along and log the progress.

 1) Create new *Debian* Server

 2) Power down and resize the *Debian N Disk* under the "Storage" tab.

    It says down to 30GB. I'll just pick that, or rather 30000 MB, as reading
    ahead says we'll soon delete the whole disk. Yay!

 3) Create new *Druix* disk using [ Add a Disk ].

    - label :: Druix
    - filesystem :: ext4
    - size :: total remaining.

 4) Under the "Configurations" tab add the *Druix* disk as ~/dev/sdc~.

 5) Now [ Add Configuration ] for our new box.

    - label :: Druix
    - kernel :: GRUB 2
    - /dev/sda  :: Druix
    - /dev/sdb  :: swap
    - root :: ~/dev/sda~
    - Filesystem/Boot Helpers :: Turn them all off


 That's the hardware setup done!

** Boot into Debian and install Guix

Power back up making sure the *Debian* configuration is still selected. This can
be done using the 'Boot' link.

Now under the "Network" tab you can see the IP address. Log in via ~ssh root@<ip
address here>~.

Awesome! That means we can use the [[https://guix.gnu.org/manual/en/html_node/Binary-Installation.html#Binary-Installation][Binary Installation]] instructions.

#+begin_src shell
sudo apt-get install update
sudo apt-get install -y gpg
wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -
wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh
chmod +x guix-install.sh
./guix-install.sh
#+end_src

When that is installed pull the latest.

#+begin_src shell
guix pull
#+end_src


*** Copy Public SSH key
:PROPERTIES:
:CUSTOM_ID: catSSH
:END:

This is simply so we can log in/out of the server.

On my local thinkpad I ~cat~ the key in order to add it to linode.

#+begin_src shell
cat ~/.ssh/id_rsa.pub
#=> ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCmBiFgKf6vECxsYDEiNVUde+y3+shyHmc4xGO/hmxKSremUXzQadwr02F3/YiwU0eiQ0Y8Mty09SQ0Ghi1wZHohVJSatSl9IspGjJHxQFZEuF5Gk3m900MGu4VO7VA29oFiJyCEEXSqsPvm4YA9pcSk+K6uwhnwVQghWMtKgXcY9FmAQ2CUdNBXaaVOvNYN7vcUzEjFANGefjwMw6HjUKcT6N5XuDfMpcSwc8ERpgx3Y5fuU4dibbm0RkOpAEmE1iemlJf5oiUI2i/DhJLQJpMEl0Hd1Oo9yEg9lXWoVu6XRhbpB3mGoe+RrLnfilDV8gSai7/rbzgE9xRyw9iVQ8bDptQabTR2ysHNocCkb10dAB4nb4VeTWDV8WIN8uU/GCi9T9jAds2pwRWVYC2HIE9FlgNk3gHKUlnELRGrttihkb9S2bh63rVs8RF8Xb3OhkpAAJIUeGeB49P2r5SiipoVUCFt+omO/ATLKd15gpCcmoByWgM/ATgtfU2uNz+468= drewc@nyx
#+end_src

Also we want the key on the debian config. While its ~guix pull~'ing we can
~scp~ it on over.

#+begin_src shell
scp ~/.ssh/id_rsa.pub root@$DEBIAN_IP:drewc_rsa.pub
#=> id_rsa.pub 100%  563     6.4KB/s   00:00
#+end_src

*** Create the ~druix-config.scm~ file.

If you're not me you should likely change the username and timezone. Then copy
that file over to the debian server.

#+begin_src shell
scp ~/me/guix/src/druix/doc/cookbook/druix-config.scm root@$DEBIAN_IP:
#+end_src

Here it is.
#+begin_src scheme :tangle "cookbook/druix-config.scm.file"
(use-modules (gnu)
             (guix modules))
(use-service-modules networking
                     ssh)
(use-package-modules admin
                     certs
                     package-management
                     ssh
                     tls)

(operating-system
  (host-name "druix-pub")
  (timezone "America/Vancouver")
  (locale "en_CA.UTF-8")
  ;; This goofy code will generate the grub.cfg
  ;; without installing the grub bootloader on disk.
  (bootloader (bootloader-configuration
               (bootloader
                (bootloader
                 (inherit grub-bootloader)
                 (installer #~(const #true))))))
  (file-systems (cons (file-system
                        (device "/dev/sda")
                        (mount-point "/")
                        (type "ext4"))
                      %base-file-systems))


  (swap-devices (list "/dev/sdb"))


  (initrd-modules (cons "virtio_scsi"    ; Needed to find the disk
                        %base-initrd-modules))

  (users (cons (user-account
                (name "drewc")
                (group "users")
                ;; Adding the account to the "wheel" group
                ;; makes it a sudoer.
                (supplementary-groups '("wheel"))
                (home-directory "/home/drewc"))
               %base-user-accounts))

  (packages (cons* nss-certs            ;for HTTPS access
                   openssh-sans-x
                   %base-packages))

  (services (cons*
             (service dhcp-client-service-type)
             (service openssh-service-type
                      (openssh-configuration
                       (openssh openssh-sans-x)
                       (password-authentication? #false)
                       (authorized-keys
                        `(("drewc" ,(local-file "drewc_rsa.pub"))
                          ("root" ,(local-file "drewc_rsa.pub"))))))
             %base-services)))
#+end_src

*** On the debian server give install a go!

Now ~ssh~ on over to the server and process the installation.

#+begin_src shell
ssh root@$DEBIAN_IP
#+end_src

1) Mount the Druix disk
   #+begin_src shell
mkdir /mnt/druix
mount /dev/sdc /mnt/druix
   #+end_src

2) Copy the ~grub~ stuff
   #+begin_src shell
mkdir -p /mnt/druix/boot/grub
cp -r /boot/grub/* /mnt/druix/boot/grub/
   #+end_src

3) Initialize the *Guix* installation
#+begin_src shell
guix system init druix-config.scm /mnt/druix
#+end_src


*** Reboot into Druix Machine

Remove the host keys and ~ssh~ in, setting some passwords along the way. I was
unable to ssh in as root.

#+begin_src shell
ssh-keygen -R $DEBIAN_IP
ssh drewc@$DEBIAN_IP
su
passwd # for root y3
passwd drewc # for the user f0
exit
#+end_src

*** Copy the ~.scm~ and ~.pub~ over to the new box.

#+begin_src shell
ssh drewc@$DEBIAN_IP mkdir druix
scp ~/.ssh/id_rsa.pub drewc@$DEBIAN_IP:/home/drewc/druix/drewc_rsa.pub
scp ~/me/guix/src/druix/doc/cookbook/druix-config.scm drewc@$DEBIAN_IP:
#+end_src

*** Add ~druix~ to the channels and pull

#+begin_src shell
cd /tmp/
CHANF=`mktemp`
cat > $CHANF <<'EOF'
(cons*
  (channel
    (name 'druix)
    (url "https://github.com/drewc/druix.git")
    (branch "main"))
 %default-channels)
EOF

scp $CHANF drewc@$DEBIAN_IP:druix/channels.scm
ssh -t drewc@$DEBIAN_IP sudo cp druix/channels.scm /etc/guix
ssh -t drewc@$DEBIAN_IP sudo chmod a+r /etc/guix/channels.scm
ssh -t drewc@$DEBIAN_IP guix pull
ssh -t drewc@$DEBIAN_IP sudo --login guix pull -v10 -K


#+end_src

*** First Imagize

We want to store it as an image to make other boxes with.

First, ~gc~ the unused packages.

#+begin_src shell
ssh -t drewc@$DEBIAN_IP guix gc
#+end_src

Now click on the [... Imagize] button and make an image! We now have druix on linode as an image.

*** Now Delete and Resize

Now we can delete our Debian disk and resize our Druix disk to full size.

So in "Storage" .

 - Debian N :: [ ... delete]
 - Druix :: [ ... resize]
   I have 81408 MB

*** Startup and demo!

Here are packages that only exist in druix.

#+begin_src shell
ssh -t drewc@$DEBIAN_IP guix install glow-lang gerbil-unstable gambit-c-unstable go-ethereum gerbil-ethereum


# The following packages will be installed:
#    gambit-c-unstable 4.9.3-1427-g46618e76
#    gerbil-unstable   0.16-192-gfa9537be
#    glow-lang         0.1.0-182-ged0bd72d
#    go-ethereum       1.10.6
#    gerbil-ethereum 0.0-285-gbb6dc2c6
#+end_src

It takes forever to build the kernel. We need it for non-free.

Let's try building it.

#+begin_src shell
guix build linux linux-firmware
#+end_src

It works!!

** Conclusion

That was easy enough and telling of how to install *Guix SD* with a different grub.

Next is making a package cache, aka `guix publish`













* Polkit: Permissions for things.
:PROPERTIES:
:CUSTOM_ID: polkit
:END:

Like a lot of my requirements this is due to my running *ThinkPad*'s for my main
platform. For power management it requires access and pops up a password prompt.
Ugh.

[[./cookbook/img/PolkitAuth.png]]

Some brief google'ing brought me here:
https://www.reddit.com/r/GUIX/comments/ki7tfo/adding_polkit_rules_the_guix_way/


That has this.

#+begin_src scheme
(use-modules (gnu services dbus))
(define my-polkit-wheel
  (file-union
   "my-polkit-wheel"
   `(("share/polkit-1/rules.d/00-my-wheel.rules"
      ,(plain-file
        "00-my-wheel.rules"
        "polkit.addRule(function(action, subject) {
    if (subject.isInGroup(\"wheel\")) {
        return polkit.Result.YES
    }
});
")))))

(define my-polkit-wheel-service
  (simple-service 'my-polkit-wheel polkit-service-type (list my-polkit-wheel)))
#+end_src

My user is in the wheel group. Time to try it out!


* Avoiding kernel recompilation

Trying to reconfigure the system for [[#polkit][polkit]] requires, by default, a kernel
recompile. Sigh.

Since prebuilt substitutes are not currently available for *Druix*, and ~guix
system reconfigure~ recompiles the kernel frequently we can pin the kernel
version and avoid lengthy rebuilds.

You must pin both Guix and Nonguix and Druix, as the Druix/Nonguix kernel
packages derive from those in Guix (so changes in either could cause a rebuild).
Your preferred kernel version must be available in all pinned channels.

Consult the output of ~guix system describe~ to get the commits of Guix and
Nonguix for the current generation. Once you have determined the commits to use,
create an inferior in your system configuration file that pins the channels to
them. Then grab the appropriately-versioned Linux package from the inferior to
use as your kernel.

#+begin_src shell :results code
guix system describe
#+end_src
*=>*
#+begin_src shell
Generation 9	Jun 13 2021 14:05:51	(current)
  file name: /var/guix/profiles/system-9-link
  canonical file name: /gnu/store/xb777rqm7q1llz0hvrwhzz09h83y9y0c-system
  label: GNU with Linux 5.12.9
  bootloader: grub-efi
  root device: UUID: af264d3f-83ce-400d-a8fe-408c72c3def1
  kernel: /gnu/store/gcy0rg1z3a7399rm6qk2nl583ll9r6b3-linux-5.12.9/bzImage
  channels:
    nonguix:
      repository URL: https://gitlab.com/nonguix/nonguix
      branch: master
      commit: c9d7f30bcbd3a6e3076e56a972c33963c73c4d58
    guix-chromium:
      repository URL: https://gitlab.com/mbakke/guix-chromium.git
      branch: master
      commit: 2de450b92e5f2624d4f964407686934e22239f7b
    druix:
      repository URL: https://github.com/drewc/druix.git
      branch: main
      commit: 23aeec0c491ccf641c5536d038a98863a474b616
    guix:
      repository URL: https://git.savannah.gnu.org/git/guix.git
      branch: master
      commit: bd02e50a02ceed914135dba1e69e4457e489cf86
  configuration file: /gnu/store/lwbhlnsjk2ghl3bpk1q4j15n421ljhxr-configuration.scm
#+end_src

#+BEGIN_SRC scheme
  (use-modules (srfi srfi-1)    ; for `first'
               (guix channels))
  (operating-system
    (kernel
     (let*
         ((channels
               (list (channel
                      (name 'druix)
                      (url "https://github.com/drewc/druix.git")
                      (commit "23aeec0c491ccf641c5536d038a98863a474b616"))
                     (channel
                      (name 'guix)
                      (url "https://git.savannah.gnu.org/git/guix.git")
                      (commit "bd02e50a02ceed914135dba1e69e4457e489cf86"))))
              (inferior
               (inferior-for-channels channels))
         (pkgs (lookup-inferior-packages inferior "linux" "5.12.9")))
       (first pkgs))

      )
    ...)
#+END_SRC
