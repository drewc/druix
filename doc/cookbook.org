#+TITLE: Druix Cookbook: recipes both tested and in progress

* Polkit
:PROPERTIES:
:CUSTOM_ID: polkit
:END:

Like a lot of my requirements this is due to my running *ThinkPad*'s for my main
platform. For power management it requires access and pops up a password prompt.
Ugh.

[[./cookbook/img/PolkitAuth.png]]

Some brief google'ing brought me here:
https://www.reddit.com/r/GUIX/comments/ki7tfo/adding_polkit_rules_the_guix_way/


That has this.

#+begin_src scheme
(use-modules (gnu services dbus))
(define my-polkit-wheel
  (file-union
   "my-polkit-wheel"
   `(("share/polkit-1/rules.d/00-my-wheel.rules"
      ,(plain-file
        "00-my-wheel.rules"
        "polkit.addRule(function(action, subject) {
    if (subject.isInGroup(\"wheel\")) {
        return polkit.Result.YES
    }
});
")))))

(define my-polkit-wheel-service
  (simple-service 'my-polkit-wheel polkit-service-type (list my-polkit-wheel)))
#+end_src

My user is in the wheel group. Time to try it out!


* Avoiding kernel recompilation

Trying to reconfigure the system for [[#polkit][polkit]] requires, by default, a kernel
recompile. Sigh.

Since prebuilt substitutes are not currently available for *Druix*, and ~guix
system reconfigure~ recompiles the kernel frequently we can pin the kernel
version and avoid lengthy rebuilds.

You must pin both Guix and Nonguix and Druix, as the Druix/Nonguix kernel
packages derive from those in Guix (so changes in either could cause a rebuild).
Your preferred kernel version must be available in all pinned channels.

Consult the output of ~guix system describe~ to get the commits of Guix and
Nonguix for the current generation. Once you have determined the commits to use,
create an inferior in your system configuration file that pins the channels to
them. Then grab the appropriately-versioned Linux package from the inferior to
use as your kernel.

#+begin_src shell :results code
guix system describe
#+end_src
*=>*
#+begin_src shell
Generation 9	Jun 13 2021 14:05:51	(current)
  file name: /var/guix/profiles/system-9-link
  canonical file name: /gnu/store/xb777rqm7q1llz0hvrwhzz09h83y9y0c-system
  label: GNU with Linux 5.12.9
  bootloader: grub-efi
  root device: UUID: af264d3f-83ce-400d-a8fe-408c72c3def1
  kernel: /gnu/store/gcy0rg1z3a7399rm6qk2nl583ll9r6b3-linux-5.12.9/bzImage
  channels:
    nonguix:
      repository URL: https://gitlab.com/nonguix/nonguix
      branch: master
      commit: c9d7f30bcbd3a6e3076e56a972c33963c73c4d58
    guix-chromium:
      repository URL: https://gitlab.com/mbakke/guix-chromium.git
      branch: master
      commit: 2de450b92e5f2624d4f964407686934e22239f7b
    druix:
      repository URL: https://github.com/drewc/druix.git
      branch: main
      commit: 23aeec0c491ccf641c5536d038a98863a474b616
    guix:
      repository URL: https://git.savannah.gnu.org/git/guix.git
      branch: master
      commit: bd02e50a02ceed914135dba1e69e4457e489cf86
  configuration file: /gnu/store/lwbhlnsjk2ghl3bpk1q4j15n421ljhxr-configuration.scm
#+end_src

#+BEGIN_SRC scheme
  (use-modules (srfi srfi-1)    ; for `first'
               (guix channels))
  (operating-system
    (kernel
     (let*
         ((channels
               (list (channel
                      (name 'druix)
                      (url "https://github.com/drewc/druix.git")
                      (commit "23aeec0c491ccf641c5536d038a98863a474b616"))
                     (channel
                      (name 'guix)
                      (url "https://git.savannah.gnu.org/git/guix.git")
                      (commit "bd02e50a02ceed914135dba1e69e4457e489cf86"))))
              (inferior
               (inferior-for-channels channels))
         (pkgs (lookup-inferior-packages inferior "linux" "5.12.9")))
       (first pkgs))

      )
    ...)
#+END_SRC
