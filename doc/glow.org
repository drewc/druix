#+TITLE: Glow: Decentralized Applications (DApps) on cryptocurrency blockchains

*Glow* is the entire reason behind my second foray into *Guix*.

* The ~glow~ package: A distribution/collection

Right now there are multiple packages which we would very much like to distribute at one. This is that.

Right now we simply inherit from ~glow-contacts~ and propagate the inputs we
desire.

#+begin_src scheme :tangle ../druix/packages/glow.scm
(define-module (druix packages glow)
  #:use-module (druix packages glow-contacts)
  #:use-module (druix packages go-ethereum)
  #:use-module (druix packages scheme gerbil gerbil-ethereum)
  #:use-module (druix packages glow-lang)
  #:use-module (gnu packages base)
  #:use-module (gnu packages bash)
  #:use-module (gnu packages sqlite)
  #:use-module (guix packages))

(define-public glow
  (package
    (inherit glow-contacts)
    (name "glow")
    (version "0.0.3")
    (synopsis "A distribution of Glow, a language for DApps")
    (description "Glow is a programming language used to make decentralized applications, otherwise known as DApps")
    (propagated-inputs `(("bash" , bash)
                         ("coreutils", coreutils-minimal)
                         ("sqlite", sqlite)
                         ("glow-lang", glow-lang)
                         ("go-ethereum", go-ethereum)
                         ("gerbil-ethereum", gerbil-ethereum)))))
#+end_src

* A Standalone ~guix pack~ of Glow

#+begin_quote
The guix pack command creates a shrink-wrapped pack or software bundle: it
creates a tarball or some other archive containing the binaries of the software
you’re interested in, and all its dependencies. The resulting archive can be
used on any machine that does not have Guix, and people can run the exact same
binaries as those you have with Guix. The pack itself is created in a
bit-reproducible fashion, so anyone can verify that it really contains the build
results that you pretend to be shipping.

-- https://guix.gnu.org/manual/en/html_node/Invoking-guix-pack.html
#+end_quote

Awesome! It's a good /scheme/ to infiltrate all boxes.

We want a user to be able to run ~glow~ without needing root, so we "...use the
~--relocatable~ option. This option produces relocatable binaries, meaning they
they can be placed anywhere in the file system hierarchy".


#+begin_quote
--relocatable
-R

Produce relocatable binaries—i.e., binaries that can be placed anywhere in the
file system hierarchy and run from there.

When this option is passed once, the resulting binaries require support for user
namespaces in the kernel Linux; when passed twice, relocatable binaries fall
to back to other techniques if user namespaces are unavailable, and essentially
work anywhere

[...]

Here’s a trick to memorize it: -RR, which adds PRoot support, can be thought of
as the abbreviation of “Really Relocatable”. Neat, isn’t it?

— https://guix.gnu.org/manual/en/html_node/Invoking-guix-pack.html
#+end_quote

Works for me! First try.

#+begin_src shell
guix pack -RR -S /bin=bin glow-lang

#+end_src

That totally works. Yay!!!!

** Docker

So, let's try a Docker image now.

#+begin_src shell
guix pack -f docker -S /bin=bin glow-contacts gerbil-ethereum glow-lang
#+end_src

And another one, this time with an entry point of the ~glow-contacts~ server.


#+begin_src shell :noweb-ref docball
DOCKBALL=$(guix pack -f docker -S /bin=bin --entry-point=/bin/glow-contacts  glow | tail -1)
#+end_src

Building it eventually outputs a tarball in the store

#+begin_src shell
DOCKBALL=/gnu/store/4ahd3922imh986r829wlbs24vhmx5a42-glow-docker-pack.tar.gz
#+end_src

We'll copy it to a more reasonable name.

#+begin_src shell :noweb-ref docball
DOCKFILE=glow-docker-v0.0.3.tar.gz
DOCKLOC=~/me/MuKn/dist/$DOCKFILE
cp -v $DOCKBALL $DOCKLOC
chmod u+rw $DOCKLOC
#+end_src

Now we can load it into a ~Docker~ instance!

#+begin_src shell
docker load < $DOCLOC
# c76d2ae372e5: Loading layer [==================================================>]   1.27GB/1.27GB
# Loaded image: glow:latest
#+end_src

The image name it gives us is all important. That, as it turns out, is what docker calls the repository and the version

#+begin_src shell
#+end_src

#+begin_src shell :tangle docball.sh :shebang "#!/bin/sh" :noweb yes
<<docball>>
#+end_src
** Squashfs
And a squashfs image.

#+begin_src shell
guix pack -f squashfs --entry-point=bin/glow bash glow-lang
#+end_src

* ~glow-lang~ package
#+begin_src scheme
((@ (druix versions) ensure-druix-versions)
 'glow-lang #:repo "https://gitlab.com/mukn/glow.git")
#+end_src

#+begin_src scheme :tangle ../druix/packages/glow-lang.scm
(define-module (druix packages glow-lang)
  #:use-module (druix packages scheme gerbil)
  #:use-module (druix packages scheme gerbil gerbil-utils)
  #:use-module (druix packages scheme gerbil smug-gerbil)
  #:use-module (druix packages scheme gerbil gerbil-poo)
  #:use-module (druix packages scheme gerbil gerbil-libp2p)
  #:use-module (druix packages scheme gerbil gerbil-crypto)
  #:use-module (druix packages scheme gerbil gerbil-persist)
  #:use-module (druix packages scheme gerbil gerbil-ethereum)
  #:use-module (gnu packages tls)
  #:use-module (druix utils gerbil-packages))

(define shebang
  '(lambda _
     (display "#!/bin/sh\n")
     (display "ORIG_GERBIL_LOADPATH=\"$GERBIL_LOADPATH\"\n")
     (display "ORIG_GERBIL_PATH=\"$GERBIL_PATH\"\n")
     (display "unset GERBIL_HOME\n")
     (display "GERBIL_LOADPATH=") (write (gerbil-loadpath outputs)) (newline)
     (display "GERBIL_PATH=\"$HOME/.cache/glow/gerbil\"\n")
     (display "export GERBIL_PATH GERBIL_LOADPATH GLOW_SOURCE ORIG_GERBIL_PATH ORIG_GERBIL_LOADPATH\n")
     (display "exec ") (display gerbil) (display "/bin/gxi ") (display out)
     (display "/lib/gerbil/lib/mukn/glow/main.ss \"$@\"")))

(define-public glow-lang
  (gxpkg/clan
   (@ (druix versions glow-lang) latest)
   "Glow: language for safe Decentralized Applications (DApps)"
   "https://github.com/fare/gerbil-ethereum" (@ (guix licenses) asl2.0)
   `(("gerbil" ,gerbil-unstable)
     ("gerbil-utils" ,gerbil-utils)
     ("gerbil-poo" ,gerbil-poo)
     ("gerbil-persist" ,gerbil-persist)
     ("gerbil-libp2p" ,gerbil-libp2p)
     ("gerbil-ethereum" ,gerbil-ethereum)
     ("smug-gerbil" ,smug-gerbil)
     ("gerbil-crypto" ,gerbil-crypto))
   #:clan '(#:software-name "Glow"
            #:gerbil-package "mukn/glow"
            #:version-path "version")
   #:arguments
  `(#:phases
     (modify-phases %standard-phases
      ;; (add-before 'copy-source 'patch-glow-install-path)
       (add-after 'build
           'shebang-glow
         (lambda* (#:key outputs inputs #:allow-other-keys)
           (let ((out (assoc-ref outputs "out"))
                 (gerbil (assoc-ref inputs "gerbil")))
             (install-file
              "main.ss" (string-append out "/lib/gerbil/lib/mukn/glow/") )
             (make-file-writable "glow")
             (with-output-to-file "glow"
               ,shebang)
             (chmod "glow" #o755)
             (install-file "glow" (string-append out "/bin"))
             (invoke "echo" "Made a shebang") (newline)
             (invoke "cat" "glow") (newline)
             #t)))))))
#+end_src

* ~glow-contacts~ package

#+begin_src scheme
((@ (druix versions) ensure-druix-versions)
 'glow-contacts #:repo "https://gitlab.com/mukn/glow-contacts.git")
#+end_src

#+begin_src scheme :tangle ../druix/packages/glow-contacts.scm
(define-module (druix packages glow-contacts)
  #:use-module (druix packages scheme gerbil)
  #:use-module (druix packages scheme gerbil gerbil-utils)
  #:use-module (druix packages scheme gerbil gerbil-ftw)
  #:use-module (druix packages scheme gerbil smug-gerbil)
  #:use-module (druix packages scheme gerbil gerbil-poo)
  #:use-module (druix packages scheme gerbil gerbil-libp2p)
  #:use-module (druix packages scheme gerbil gerbil-crypto)
  #:use-module (druix packages scheme gerbil gerbil-persist)
  #:use-module (druix packages scheme gerbil gerbil-ethereum)
  #:use-module (guix download)
  #:use-module (guix packages)
  #:use-module (guix build-system copy)
  #:use-module (gnu packages base)
  #:use-module (gnu packages compression)
  #:use-module (druix packages glow-lang)
  #:use-module (druix utils gerbil-packages))

(define-public gloui-spa
  (package
    (name "gloui-spa")
    (version "0.5.1")
    (synopsis "gloUI, a UI for glow, which is a programming language used to make decentralized applications.")
    (description synopsis)
    (home-page "https://github.com/drewc/gloui")
    (license (@ (guix licenses) expat))
    (source
     (origin
       (method url-fetch/tarbomb)
       (uri "https://github.com/drewc/gloui/releases/download/v0.5.1/gloui-SPA-0.5.1.tar.gz")
       (sha256
        (base32 "1i3ad9vk01p7qnr0j8al2nawnrynkpm53vs9i8rcc34vbglkn059"))))
   (build-system copy-build-system)
   (arguments
  `(#:phases
     (modify-phases %standard-phases
       (delete 'reset-gzip-timestamps))))))

(define shebang
  '(lambda _
     (display "#!/bin/sh\n")
     (display "ORIG_GERBIL_LOADPATH=\"$GERBIL_LOADPATH\"\n")
     (display "ORIG_GERBIL_PATH=\"$GERBIL_PATH\"\n")
     (display "unset GERBIL_HOME\n")
     (display "GERBIL_LOADPATH=") (write (gerbil-loadpath outputs)) (newline)
     (display "GERBIL_PATH=\"$HOME/.cache/glow/gerbil\"\n")
     (display "export GERBIL_PATH GERBIL_LOADPATH GLOW_SOURCE ORIG_GERBIL_PATH ORIG_GERBIL_LOADPATH\n")

     ;;; Ok, is there a database?
     (display "GLOW_CONTACTS_DB=\"$HOME/.config/glow/db/contacts.db\"\n")
     ;;; If not, create one.
     (display "if [ ! -f \"$GLOW_CONTACTS_DB\" ]; then\n")
     (display "mkdir -p $(dirname \"$GLOW_CONTACTS_DB\")\n")
     (display (string-append out "/bin/make-glow-contacts-db \n fi\n"))

     ;;; Now the wwwroot
     (display "WWWROOT=$HOME/.config/glow/wwwroot\n")
     ;;;  If it exist and is not a symlink, warn and continue
     (display (string-append
               "if [ -d \"$WWWROOT\" -a ! -h \"$WWWROOT\" ];\n then\n"
               "   echo WARNING $WWWROOT is a directory and not a symlink."
               "Consider changing it and proceed with caution. \n"
               "else \n"))
     ;;; if it is a symlink delete it.
     (display "  [[ -h \"$WWWROOT\" ]] && rm $WWWROOT;\n")
     ;;; ... and finally create the symlink
     (display "mkdir -p $(dirname \"$WWWROOT\")\n")
     (display (string-append "ln -s " gloui-spa " \"$WWWROOT\" ; \n fi \n"))


     (display "exec ") (display gerbil) (display "/bin/gxi ") (display out)
     (display "/lib/gerbil/lib/mukn/glow-contacts/main.ss \"$@\"")))

(define-public glow-contacts
  (gxpkg/clan
   (@ (druix versions glow-contacts) latest)
   "Glow Contacts for Decentralized Applications (DApps)"
   "https://gitlab.com/drewc/glow-contacts" (@ (guix licenses) asl2.0)
   `(("gerbil" ,gerbil-unstable)
     ("gerbil-utils" ,gerbil-utils)
     ("gerbil-poo" ,gerbil-poo)
     ("gerbil-persist" ,gerbil-persist)
     ("gerbil-libp2p" ,gerbil-libp2p)
     ("gerbil-ethereum" ,gerbil-ethereum)
     ("smug-gerbil" ,smug-gerbil)
     ("gerbil-crypto" ,gerbil-crypto)
     ("gerbil-ftw" ,gerbil-ftw)
     ("gloui-spa" ,gloui-spa)
     ("glow-lang", glow-lang)
     ("coreutils", coreutils-minimal))
   #:clan '(#:software-name "Glow Contacts"
            #:gerbil-package "mukn/glow-contacts"
            #:version-path "version")
   #:arguments
  `(#:phases
     (modify-phases %standard-phases
      ;; (add-before 'copy-source 'patch-glow-install-path)
       (add-after 'build
           'shebang-glow
         (lambda* (#:key outputs inputs #:allow-other-keys)
           (let* ((out (assoc-ref outputs "out"))
                  (gerbil (assoc-ref inputs "gerbil"))
                  (gloui-spa (assoc-ref inputs "gloui-spa"))
                  (db (string-append out "/share/glow-contacts/db")))
             (install-file
              "main.ss"
              (string-append out "/lib/gerbil/lib/mukn/glow-contacts/"))
             (with-output-to-file "glow-contacts"
               ,shebang)
             (chmod "glow-contacts" #o755)
             (install-file "glow-contacts" (string-append out "/bin"))
             (invoke "echo" "Made a shebang") (newline)
             (invoke "cat" "glow-contacts") (newline)
             (copy-recursively "db" db)
             (with-output-to-file "make-glow-contacts-db"
               (lambda _(display (string-append
                         "#!/bin/sh\n cd " db "\n"
                         "./makedb.sh"))))
             (chmod "make-glow-contacts-db" #o755)
             (install-file "make-glow-contacts-db" (string-append out "/bin"))
             #t)))))))
#+end_src
