#+TITLE: Go Ethereum: Official Golang implementation of the Ethereum protocol.

On of the first users of the *Druix* plaform are the authors of [[file:glow.org][Glow:
Decentralized Applications (DApps) on cryptocurrency blockchains]]. Ethereum is a
major player in the chain market, and ~geth~ a cli client that is used for
running a test node.


* Build from upstream tarball

#+begin_quote
Most Linux systems and macOS

Go Ethereum is written in Go, so to build from source code you need the most
recent version of Go. This guide doesnâ€™t cover how to install Go itself, for
details read the Go installation instructions and grab any needed bundles from
the Go download page.

With Go installed, you can download the project into you GOPATH workspace via:

go get -d github.com/ethereum/go-ethereum

You can also install specific versions via:

go get -d github.com/ethereum/go-ethereum@v1.9.21

The above commands do not build any executables. To do that you can either build one specifically:

go install github.com/ethereum/go-ethereum/cmd/geth

Or you can build the entire project and install geth along with all developer tools by running go install ./... in the ethereum/go-ethereum repository root inside your GOPATH workspace.

If you are using macOS and see errors related to macOS header files, install XCode Command Line Tools with xcode-select --install, and try again.

If you encounter go: cannot use path@version syntax in GOPATH mode or similar errors, enable gomodules using export GO111MODULE=on.
#+end_quote

Guix try.

#+begin_src shell
cd /tmp/ ; cd $(mktemp -d "GETH_XXXX");

mkdir go-root-here; cd go-root-here;
export GOPATH="$(pwd)" ; cd ..

tar xvf ~/Downloads/go-ethereum-1.10.6.tar.gz
cd go-ethereum-1.10.6/

make geth


# env GO111MODULE=on go run build/ci.go install ./cmd/geth
# go: downloading golang.org/x/crypto v0.0.0-20210322153248-0c34fe9e7dc2
# go: downloading github.com/Azure/azure-storage-blob-go v0.7.0
# go: downloading github.com/cespare/cp v0.1.0
# go: downloading github.com/Azure/azure-pipeline-go v0.2.2
# go: downloading github.com/mattn/go-ieproxy v0.0.0-20190702010315-6dee0af9227d
# [....]
# github.com/ethereum/go-ethereum/crypto/secp256k1
# github.com/karalabe/usb
# github.com/ethereum/go-ethereum/crypto
# github.com/ethereum/go-ethereum/accounts/usbwallet
# Done building.
# Run "./build/bin/geth" to launch geth.


ls -d ../go-root-here/pkg/mod/*

# ../go-root-here/pkg/mod/cache/       ../go-root-here/pkg/mod/golang.org/         ../go-root-here/pkg/mod/gopkg.in/
# ../go-root-here/pkg/mod/github.com/  ../go-root-here/pkg/mod/google.golang.org/


cd $(mktemp -d "GETH_USE_OLD_ROOT_XXXX");

tar xvf ~/Downloads/go-ethereum-1.10.6.tar.gz
cd go-ethereum-1.10.6/

make geth

# env GO111MODULE=on go run build/ci.go install ./cmd/geth
# >>> /gnu/store/y5rwacd5l4q26pxis28wsmswj2603hkw-go-1.14.15/bin/go build -trimpath -v -o /tmp/GETH_kP82/go-ethereum-1.10.6/GETH_USE_OLD_ROOT_VroS/go-ethereum-1.10.6/build/bin/geth ./cmd/geth
# github.com/ethereum/go-ethereum/crypto/secp256k1
# github.com/ethereum/go-ethereum/crypto
# Done building.
# Run "./build/bin/geth" to launch geth.


#+end_src


** Library Tarball

Ok! Let's make a tarball and release it.

#+begin_src shell
cd /tmp/ ; cd $(mktemp -d "GETH_XXXX");

mkdir go-root-here; cd go-root-here;
export GOPATH="$(pwd)" ; cd ..

mkdir go-cache-here; cd go-cache-here;
export GOCACHE="$(pwd)" ; cd ..

tar xvf ~/Downloads/go-ethereum-1.10.6.tar.gz
cd go-ethereum-1.10.6/

make geth

cd go-root-here/ ; tar zcvf ../go-ethereum-libs-1.10.6.tar.gz ./ ; cd ..
mv go-ethereum-libs-1.10.6.tar.gz ~/me/guix/
#+end_src

Now a package

#+begin_src scheme :noweb-ref go-ethereum-gopath
(define version "1.10.6")

(define-public go-ethereum-gopath
  (package
    (name "go-ethereum-gopath")
    (version version)
    (source (origin
              (method url-fetch/tarbomb)
              (uri "https://github.com/drewc/druix/releases/download/v0.0.0-geth-libs/go-ethereum-libs-1.10.6.tar.gz")
              (sha256
               (base32
                "0ks6bshmlmmqw9dpcfhp7d136dvaqnp42yqh84xmgk1s5ynrpryk"))))
    (build-system copy-build-system)
     (arguments
       `(#:phases
         (modify-phases %standard-phases
           (delete 'reset-gzip-timestamps))))
    (synopsis " Build Libs for Official Golang implementation of the Ethereum protocol.")
    (home-page "https://geth.ethereum.org/")
    (description synopsis)
    (license l:gpl3)))
#+end_src


* File ~druix/packages/go-ethereum.scm~

#+begin_src scheme :tangle ../druix/packages/go-ethereum.scm :noweb yes
(define-module (druix packages go-ethereum)
  #:use-module (druix packages golang)
  #:use-module (druix utils)
  #:use-module ((druix versions) #:prefix v:)
  #:use-module (guix packages)
  #:use-module (guix download)
  #:use-module (gnu packages golang)
  #:use-module (guix build-system gnu)
  #:use-module (guix build-system copy)
  #:use-module (guix build-system go)
  #:use-module ((guix licenses) #:prefix l:)
  #:use-module (guix git-download))

<<go-ethereum-gopath>>

(define-public go-ethereum
  (package
    (name "go-ethereum") (version version)
    (synopsis "Official Golang implementation of the Ethereum protocol.")
    (home-page "https://geth.ethereum.org/") (description synopsis)
    (license l:gpl3) (build-system gnu-build-system)
    (arguments
     '(#:phases
       (modify-phases %standard-phases
         (delete 'configure)
         (delete 'check)
         (replace 'build
           (lambda* (#:key inputs #:allow-other-keys)
             (let ((gopath (assoc-ref inputs "gopath")))
               (invoke "echo" gopath)
               (with-directory-excursion "go-ethereum-1.10.6"
                 (setenv "GOPATH" gopath)
                 (setenv "GOCACHE" "/tmp/go-cache")
                 (invoke "make" "geth")))))
         (replace 'install
           (lambda* (#:key outputs #:allow-other-keys)
             (let ((bin (string-append (assoc-ref outputs "out") "/bin")))
               (invoke "echo" bin)
               (with-directory-excursion "go-ethereum-1.10.6"
                 (install-file "./build/bin/geth" bin)))
             #t)))))
    (inputs `(("gopath" ,go-ethereum-gopath)
              ("go" ,go)))
    (source (origin
              (method url-fetch/tarbomb)
              (uri "https://github.com/ethereum/go-ethereum/archive/refs/tags/v1.10.6.tar.gz")
              (sha256
               (base32
                "0cpnln5ycv7sybw0b826mdxla15az997pb3vldqmzzrlbjdg091p"))))))
#+end_src
