#+TITLE: Go: Wake me up, before you C Go.

This is the first attempt at a *Go* packages, like a yoyo.

* ~go-build-system~ and ~make-go-package~

#+begin_quote
This variable is exported by (guix build-system go). It implements a build
procedure for Go packages using the standard Go build mechanisms.

The user is expected to provide a value for the key #:import-path and, in some
cases, #:unpack-path. The import path corresponds to the file system path
expected by the package’s build scripts and any referring packages, and provides
a unique way to refer to a Go package. It is typically based on a combination of
the package source code’s remote URI and file system hierarchy structure. In
some cases, you will need to unpack the package’s source code to a different
directory structure than the one indicated by the import path, and #:unpack-path
should be used in such cases.

Packages that provide Go libraries should install their source code into the
built output. The key #:install-source?, which defaults to #t, controls whether
or not the source code is installed. It can be set to #f for packages that only
provide executable files.

-- https://guix.gnu.org/manual/en/html_node/Build-Systems.html
#+end_quote

#+begin_src scheme
;; Go software, whether a package or a command, is uniquely named using an
;; 'import path'.  The import path is based on the URL of the software's source.
;; Because most source code is provided over the internet, the import path is
;; typically a combination of the remote URL and the source repository's file
;; system structure. For example, the Go port of the common `du` command is
;; hosted on github.com, at <https://github.com/calmh/du>.  Thus, the import
;; path is <github.com/calmh/du>.
#+end_src

* Import path: becomes repo and name

So, in ~guix/gnu/packages/golang.scm~ they seem to set a precendent. At least
for some packages lol.

Here's our first.

   + #:import-path :: "github.com/VictoriaMetrics/fastcache"


   + git repo :: "https://github.com/VictoriaMetrics/fastcache.git"
     #+begin_src scheme :noweb-ref git-repo<-import-path
(define (git-repo<-import-path ip)
  (string-append "https://" ip ".git"))
     #+end_src

   + package name :: "go-github-com-VictoriaMetrics-fastcache"
     #+begin_src scheme :noweb-ref package-name<-import-path
 (define (package-name<-import-path ip)
   (list->string
    (cons* #\g #\o #\-
           (map (lambda (c) (if (member c '(#\. #\/)) #\- c))
                (string->list ip)))))
     #+end_src

   + home page ::

     #+begin_src scheme :noweb-ref home-page<-import-path
(define (home-page<-import-path ip)
  (string-append "https://" ip ))
     #+end_src



* Druix versions
  We need a ~<druix-version>~.

We'll make the #:unpack-path here as well in case it, and therefore the repo, differ.

#+begin_src scheme :noweb-ref ensure-go-druix-versions
(define* (ensure-go-druix-versions ip #:key (unpack-path ip) . args)
  (apply (@ (druix versions) ensure-druix-versions)
         (string->symbol (package-name<-import-path ip))
         #:repo (git-repo<-import-path unpack-path)
         args))
#+end_src

* Make Go Package
And a simple way to make a package.

#+begin_src scheme :noweb-ref make-go-package
(define* (make-go-package
          ip synopsis
          #:key
          (home-page (home-page<-import-path ip))
          (description synopsis)
          (license l:expat)
          (inputs '())
          (phases '%standard-phases)
          (unpack-path #f))
  (let* ((name (package-name<-import-path ip))
         (latest-version
          (module-ref (resolve-module `(druix versions ,(string->symbol name)))
                      'latest)))
    (package
      (name name) (version (v:druix-version latest-version))
      (synopsis synopsis) (home-page home-page) (description description)
      (license license) (build-system go-build-system)
      (arguments `(#:import-path ,ip #:phases ,phases
                   ,@(if (not unpack-path) '()
                         (list #:unpack-path unpack-path))))
      (inputs inputs)
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url (v:repo latest-version))
               (commit (v:commit latest-version))))
         (sha256 (base32 (v:sha256 latest-version)))
         (file-name (git-file-name name version)))))))
#+end_src

* Publicize Go Package
Packages need to be exported in order for ~guix install~ to pick them up.

#+begin_src scheme :noweb-ref publicize-go-package
(define-macro (define-public-go-package ip synop . args)
    `(define-public ,(string->symbol (package-name<-import-path ip)) (apply make-go-package ,ip ,synop (list ,@args))))
#+end_src

* /File/ ~(druix utils go-packages)~

#+begin_src scheme :tangle ../druix/utils/go-packages.scm :noweb yes
(define-module (druix utils go-packages)
  #:use-module (druix utils)
  #:use-module ((druix versions) #:prefix v:)
  #:use-module (guix packages)
  #:use-module (gnu packages golang)
  #:use-module ((guix licenses) #:prefix l:)
  #:use-module (guix build-system go)
  #:use-module (guix git-download)
  #:export
  (ensure-go-druix-versions
   make-go-package
   define-public-go-package))

<<git-repo<-import-path>>

<<package-name<-import-path>>
<<home-page<-import-path>>

<<ensure-go-druix-versions>>

<<make-go-package>>

<<publicize-go-package>>
#+end_src


* Whole Lotta Packages

To make it simple we'll print a form that we copy/paste.

#+begin_src scheme
(define* (pgpd import-path #:optional (syn "Put synopsis here") #:key (up #f))
  (newline)
  (newline)
  (display (string-append ";; " (package-name<-import-path import-path)))
  (newline)
  (write `((@ (druix utils go-packages) ensure-go-druix-versions)
           ,import-path ,@(if up (list #:unpack-path up) '())))
  (newline)
  (display (string-append ";; " (package-name<-import-path import-path)))
  (newline)
  (write `(define-public-go-package ,import-path ,syn))
  (newline)
  (newline)
  (flush-all-ports))

(pgpd "github.com/go-sourcemap/sourcemap")

(pgpd "github.com/edsrzf/mmap-go" "A portable mmap package for Go")
(pgpd "github.com/fjl/memsize" "memsize computes the size of your object graph")

(pgpd "github.com/gballet/go-libpcsclite" "A golang implementation of the libpcpsclite client")

(pgpd "github.com/go-stack/stack" "Package stack implements utilities to capture, manipulate, and format call stacks.")
(pgpd "github.com/golang/protobuf" "Go support for Protocol Buffers")

(pgpd "github.com/gorilla/websocket" "A fast, well-tested and widely used WebSocket implementation for Go.")

(pgpd "github.com/graph-gophers/graphql-go"
      "GraphQL server with a focus on ease of use")

(pgpd "github.com/opentracing/opentracing-go"
      "OpenTracing API for Go")

(pgpd "github.com/hashicorp/golang-lru"
      "Golang LRU cache")

(pgpd "github.com/holiman/bloomfilter/v2" "syn" #:up "github.com/holiman/bloomfilter")

(pgpd "github.com/holiman/uint256" "Fixed size 256-bit math library for Go")

(pgpd "github.com/huin/goupnp" "UPnP client library for Go")

(pgpd "github.com/influxdata/influxdb/client"
      "Scalable datastore for metrics, events, and real-time analytics"
      #:up "github.com/influxdata/influxdb")

(pgpd "github.com/influxdata/influxdb"
      "Scalable datastore for metrics, events, and real-time analytics")

(pgpd "github.com/influxdata/flux/"
      "Flux is a lightweight scripting language for querying databases")


(pgpd "github.com/apache/arrow/go/arrow/array"
      "Apache Arrow go array"
      #:up "github.com/apache/arrow/")

(pgpd "github.com/apache/arrow/go/arrow"
      "Apache Arrow go array"
      #:up "github.com/apache/arrow/")

#+end_src



#+begin_src scheme
;; named go-github-com-VictoriaMetrics-fastcache
((@ (druix utils go-packages) ensure-go-druix-versions)
"github.com/VictoriaMetrics/fastcache")

;; go-github-com-deckarep-golang-set
((@ (druix utils go-packages) ensure-go-druix-versions)
  "github.com/deckarep/golang-set")

;; go-github-com-dop251-goja
((@ (druix utils go-packages) ensure-go-druix-versions)
 "github.com/dop251/goja")

;; go-github-com-go-sourcemap-sourcemap
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/go-sourcemap/sourcemap")

;; go-github-com-edsrzf-mmap-go
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/edsrzf/mmap-go")

;; go-github-com-fjl-memsize
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/fjl/memsize")

;; go-github-com-gballet-go-libpcsclite
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/gballet/go-libpcsclite")


;; go-github-com-go-stack-stack
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/go-stack/stack")



;; go-github-com-golang-protobuf
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/golang/protobuf")

;; go-github-com-gorilla-websocket
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/gorilla/websocket")



;; go-github-com-graph-gophers-graphql-go
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/graph-gophers/graphql-go")


;; go-github-com-opentracing-opentracing-go
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/opentracing/opentracing-go")



;; go-github-com-hashicorp-golang-lru
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/hashicorp/golang-lru")


;; go-github-com-holin-bloomfilter-v2
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/holiman/bloomfilter/v2"
 #:unpack-path "github.com/holiman/bloomfilter")




;; go-github-com-holiman-uint256
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/holiman/uint256")

;; go-github-com-huin-goupnp
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/huin/goupnp")


;; go-github-com-influxdata-influxdb-client
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/influxdata/influxdb/client" #:unpack-path "github.com/influxdata/influxdb")


;; go-github-com-influxdata-influxdb-v2-kit-platform
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/influxdata/influxdb/v2/kit/platform" #:unpack-path "github.com/influxdata/influxdb")


;; go-github-com-influxdata-influxdb
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/influxdata/influxdb")

;; go-github-com-influxdata-flux-asr
((@ (druix utils go-packages) ensure-go-druix-versions)
 "github.com/influxdata/flux/ast"
 #:unpack-path "github.com/influxdata/flux")


;; go-github-com-apache-arrow-go-arrow
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/apache/arrow/go/arrow/go/arrow"
 #:unpack-path "github.com/apache/arrow")

;; go-github-com-apache-arrow-go-arrow-array
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/apache/arrow/go/arrow")

((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/apache/arrow/go/arrow/go/arrow/go/arrow"
 #:unpack-path "github.com/apache/arrow")

((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/apache/arrow")

;; go-github-com-apache-arrow-go-arrow
((@ (druix utils go-packages) ensure-go-druix-versions) "github.com/apache/arrow/go/arrow" #:unpack-path "github.com/apache/arrow")
#+end_src

#+begin_src scheme :tangle ../druix/packages/golang.scm
(define-module (druix packages golang)
  #:use-module (druix utils)
  #:use-module (druix utils go-packages)
  #:use-module ((druix versions) #:prefix v:)
  #:use-module (guix packages)
  #:use-module (gnu packages golang)
  #:use-module (gnu packages syncthing)
  #:use-module (guix build-system gnu)
  #:use-module (guix build-system go)
  #:use-module ((guix licenses) #:prefix l:)
  #:use-module (guix git-download)
  #:re-export
  (go
   go-github-com-davecgh-go-spew
   go-github-com-dlclark-regexp2
   go-golang-org-x-text
   go-gopkg-in-yaml-v2
   go-golang-org-x-sys
   go-github-com-fatih-color
   go-github-com-golang-protobuf-proto
   go-github-com-golang-snappy
   go-github-com-google-uuid
   go-golang.org-x-sync-errgroup
   go-github-com-burntsushi-toml))


;; go-github-com-VictoriaMetrics-fastcache
 (define-public-go-package
  "github.com/VictoriaMetrics/fastcache"
  "Fast thread-safe inmemory cache for big number of entries in Go.")

;; go-github-com-deckarep-golang-set
 (define-public-go-package
  "github.com/deckarep/golang-set"
  "A simple set type for the Go language."
  #:description "A simple set type for the Go language. Trusted by Docker, 1Password, Ethereum and Hashicorp.")

;;
(define-public-go-package
  "github.com/go-sourcemap/sourcemap"
  "Source maps consumer for Golang"
  #:phases '(modify-phases %standard-phases
              (delete 'check)))

;; go-github-com-dop251-goja
(define-public-go-package
  "github.com/dop251/goja"
  "ECMAScript/JavaScript engine in pure Go"
   #:inputs `(("perl", (@ (gnu packages perl) perl))
              ("go-github-com-dlclark-regexp2"
               ,go-github-com-dlclark-regexp2)
              ("go-github-com-go-sourcemap-sourcemap"
               , go-github-com-go-sourcemap-sourcemap)
              ("go-golang-org-x-text" ,go-golang-org-x-text)
              ("gopkg.in/yaml.v2" ,go-gopkg-in-yaml-v2))
    #:phases '(modify-phases %standard-phases (delete 'check)))

;; go-github-com-edsrzf-mmap-go
(define-public-go-package
  "github.com/edsrzf/mmap-go" "A portable mmap package for Go"
  #:inputs `(("golang.org/x/sys" ,go-golang-org-x-sys)))

;; go-github-com-fjl-memsize
(define-public-go-package "github.com/fjl/memsize" "memsize computes the size of your object graph")


;; go-github-com-gballet-go-libpcsclite
(define-public-go-package "github.com/gballet/go-libpcsclite" "A golang implementation of the libpcpsclite client")


;; go-github-com-go-stack-stack
(define-public-go-package "github.com/go-stack/stack" "Package stack implements utilities to capture, manipulate, and format call stacks.")

;; ;; go-github-com-golang-protobuf
;; (define-public-go-package "github.com/golang/protobuf"
;;   "Go support for Protocol Buffers")

(define-public go-github-com-golang-protobuf-protoc-gen-go-descriptor
  (package
    (name "go-github-com-golang-protobuf-protoc-gen-go-descriptor")
    (version "1.3.1")
    (source (origin
              (method git-fetch)
              (uri (git-reference
                     (url "https://github.com/golang/protobuf")
                     (commit (string-append "v" version))))
              (file-name (git-file-name name version))
              (sha256
               (base32
                "15am4s4646qy6iv0g3kkqq52rzykqjhm4bf08dk0fy2r58knpsyl"))))
    (build-system go-build-system)
    (arguments
     '(#:import-path "github.com/golang/protobuf/protoc-gen-go/descriptor"
       #:unpack-path "github.com/golang/protobuf"
       ;; Requires unpackaged golang.org/x/sync/errgroup
       #:tests? #f))
    (synopsis "Go support for Protocol Buffers")
    (description "This package provides Go support for the Protocol Buffers
data serialization format.")
    (home-page "https://github.com/golang/protobuf")
    (license l:bsd-3)))


;; go-github-com-gorilla-websocket
(define-public-go-package "github.com/gorilla/websocket"
  "A fast, well-tested and widely used WebSocket implementation for Go.")

;; go-github-com-opentracing-opentracing-go
(define-public-go-package "github.com/opentracing/opentracing-go" "OpenTracing API for Go"
  #:phases '(modify-phases %standard-phases (delete 'check)))

;; go-github-com-graph-gophers-graphql-go
(define-public-go-package "github.com/graph-gophers/graphql-go"
  "GraphQL server with a focus on ease of use"
  #:inputs `(("go-github-com-opentracing-opentracing-go"
             ,go-github-com-opentracing-opentracing-go))
  #:phases '(modify-phases %standard-phases (delete 'check)))



;; go-github-com-hashicorp-golang-lru
(define-public-go-package "github.com/hashicorp/golang-lru" "Golang LRU cache")


;; go-github-com-holiman-bloomfilter-v2
(define-public-go-package "github.com/holiman/bloomfilter/v2"
  "Bloom filter in go"
  #:description
  "Face-meltingly fast, thread-safe, marshalable, unionable, probability- and optimal-size-calculating Bloom filter in go"
  #:unpack-path "github.com/holiman/bloomfilter")



;; go-github-com-holiman-uint256
(define-public-go-package "github.com/holiman/uint256" "Fixed size 256-bit math library for Go")


;; go-github-com-huin-goupnp
(define-public-go-package "github.com/huin/goupnp" "UPnP client library for Go"
  #:inputs `(("go-golang.org-x-sync-errgroup", go-golang.org-x-sync-errgroup)))


;; ;; go-github-com-influxdata-influxdb-v2-kit-platform
;; (define-public-go-package "github.com/influxdata/influxdb/v2/kit/platform" "Scalable datastore for metrics, events, and real-time analytics")



;; ;; go-github-com-influxdata-influxdb-client
;; (define-public-go-package "github.com/influxdata/influxdb/client"
;;   "Scalable datastore for metrics, events, and real-time analytics"
;;   #:inputs `(("go-github-com-influxdata-influxdb-v2-kit-platform"
;;              ,go-github-com-influxdata-influxdb-v2-kit-platform)))

(define-public go-google-golang-org-protobuf
  (package
    (name "go-google-golang-org-protobuf")
    (version "1.27.1")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://go.googlesource.com/protobuf")
               (commit (string-append "v" version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "0aszb7cv8fq1m8akgd4kjyg5q7g5z9fdqnry6057ygq9r8r2yif2"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path "google.golang.org/protobuf"))
    (propagated-inputs
      `(("go-github-com-google-go-cmp"
         ,go-github-com-google-go-cmp)
        ("go-github-com-golang-protobuf"
         ,go-github-com-golang-protobuf)))
    (home-page "https://google.golang.org/protobuf")
    (synopsis "Go support for Protocol Buffers")
    (description
      "This project hosts the Go implementation for
@url{https://developers.google.com/protocol-buffers,protocol buffers}, which is a
language-neutral, platform-neutral, extensible mechanism for serializing
structured data.  The protocol buffer language is a language for specifying the
schema for structured data.  This schema is compiled into language specific
bindings.  This project provides both a tool to generate Go code for the
protocol buffer language, and also the runtime implementation to handle
serialization of messages in Go.  See the
@url{https://developers.google.com/protocol-buffers/docs/overview,protocol buffer developer guide}
for more information about protocol buffers themselves.")
    (license l:bsd-3)))

(define-public go-google-golang-org-grpc
  (package
    (name "go-google-golang-org-grpc")
    (version "1.39.0")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/grpc/grpc-go")
               (commit (string-append "v" version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "02wbl21kjx118ranbhqbpzxnq31mayi2w60vdrm2zn3rqqf3jszy"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path "google.golang.org/grpc"))
    (propagated-inputs
      `(("go-google-golang-org-protobuf"
         ,go-google-golang-org-protobuf)
        ("go-google-golang-org-genproto"
         ,go-google-golang-org-genproto)
        ("go-golang-org-x-sys" ,go-golang-org-x-sys)
        ("go-golang-org-x-oauth2"
         ,go-golang-org-x-oauth2)
        ("go-golang-org-x-net" ,go-golang-org-x-net)
        ("go-github-com-google-uuid"
         ,go-github-com-google-uuid)
        ("go-github-com-google-go-cmp"
         ,go-github-com-google-go-cmp)
        ("go-github-com-golang-protobuf"
         ,go-github-com-golang-protobuf)
        ("go-github-com-golang-glog"
         ,go-github-com-golang-glog)
        ("go-github-com-envoyproxy-go-control-plane"
         ,go-github-com-envoyproxy-go-control-plane)
        ("go-github-com-cncf-udpa-go"
         ,go-github-com-cncf-udpa-go)))
    (home-page "https://google.golang.org/grpc")
    (synopsis "gRPC-Go")
(description
      "Package grpc implements an RPC system called gRPC.")
    (license l:asl2.0)))
(define-public go-google-golang-org-genproto
  (package
    (name "go-google-golang-org-genproto")
    (version "0.0.0-20210701191553-46259e63a0a9")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/googleapis/go-genproto")
               (commit (go-version->git-ref version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "0z60xi1qc0cqzia5rpilb0v2qnkzbx50sfp6cjc9zmdip9jdysya"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path "google.golang.org/genproto"))
    (propagated-inputs
      `(("go-google-golang-org-protobuf"
         ,go-google-golang-org-protobuf)
        ("go-google-golang-org-grpc"
         ,go-google-golang-org-grpc)
        ("go-golang-org-x-tools" ,go-golang-org-x-tools)
        ("go-golang-org-x-text" ,go-golang-org-x-text)
        ("go-golang-org-x-lint" ,go-golang-org-x-lint)
        ("go-github-com-golang-protobuf"
         ,go-github-com-golang-protobuf)))
    (home-page "https://google.golang.org/genproto")
    (synopsis "Go generated proto packages")
    (description
      "This repository contains the generated Go packages for common protocol buffer
types, and the generated @url{http://grpc.io,gRPC} code necessary for interacting with Google's gRPC
APIs.")
    (license l:asl2.0)))

(define-public go-github-com-pierrec-lz4-v4
  (package
    (name "go-github-com-pierrec-lz4-v4")
    (version "4.1.8")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/pierrec/lz4")
               (commit (string-append "v" version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "1ffsm2ny2v6nasc3zww5f2bl0jqi2jmiyqm8x2cvyzrd0clay1wl"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path "github.com/pierrec/lz4"))
    (home-page "https://github.com/pierrec/lz4")
    (synopsis "lz4 : LZ4 compression in pure Go")
    (description
      "Package lz4 implements reading and writing lz4 compressed data.
")
    (license l:bsd-3)))
(define-public go-github-com-klauspost-compress
  (package
    (name "go-github-com-klauspost-compress")
    (version "1.13.1")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/klauspost/compress")
               (commit (string-append "v" version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "0ydnf9rizlhm8rilh14674qqx272sbwbkjx06xn9pqvy6mmn2r3r"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path "github.com/klauspost/compress"))
    (propagated-inputs
      `(("go-github-com-golang-snappy"
         ,go-github-com-golang-snappy)))
    (home-page
      "https://github.com/klauspost/compress")
    (synopsis "compress")
    (description
      "This package provides various compression algorithms.")
    (license l:bsd-3)))

(define-public go-github-com-google-go-cmp
  (package
    (name "go-github-com-google-go-cmp")
    (version "0.5.6")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/google/go-cmp")
               (commit (string-append "v" version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "0lrb0pacv5iy3m6fn1qb3nv7zwimfhpzqq8f6hwpwx88cx3g6p1s"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path "github.com/google/go-cmp"))
    (propagated-inputs
      `(("go-golang-org-x-xerrors"
         ,go-golang-org-x-xerrors)))
    (home-page "https://github.com/google/go-cmp")
    (synopsis "Package for equality of Go values")
    (description
      "This package is intended to be a more powerful and safer alternative to
@code{reflect.DeepEqual} for comparing whether two values are semantically equal.")
    (license l:bsd-3)))

(define-public go-github-com-google-flatbuffers
  (package
    (name "go-github-com-google-flatbuffers")
    (version "2.0.0+incompatible")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/google/flatbuffers")
               (commit (go-version->git-ref version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "1zbf6bdpps8369r1ql00irxrp58jnalycc8jcapb8iqg654vlfz8"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path "github.com/google/flatbuffers"))
    (home-page
      "https://github.com/google/flatbuffers")
    (synopsis "FlatBuffers")
    (description
      "@strong{FlatBuffers} is a cross platform serialization library architected for
maximum memory efficiency.  It allows you to directly access serialized data without parsing/unpacking it first, while still having great forwards/backwards compatibility.")
    (license l:asl2.0)))

(define-public go-github-com-golang-protobuf
  (package
    (name "go-github-com-golang-protobuf")
    (version "1.5.2")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/golang/protobuf")
               (commit (string-append "v" version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "1mh5fyim42dn821nsd3afnmgscrzzhn3h8rag635d2jnr23r1zhk"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path "github.com/golang/protobuf"))
    (propagated-inputs
      `(("go-google-golang-org-protobuf"
         ,go-google-golang-org-protobuf)
        ("go-github-com-google-go-cmp"
         ,go-github-com-google-go-cmp)))
    (home-page "https://github.com/golang/protobuf")
    (synopsis "Go support for Protocol Buffers")
    (description
      "This module
(@url{https://pkg.go.dev/mod/github.com/golang/protobuf,(code github.com/golang/protobuf)})
contains Go bindings for protocol buffers.")
    (license l:bsd-3)))

(define-public go-github-com-golang-glog
  (package
    (name "go-github-com-golang-glog")
    (version "0.0.0-20210429001901-424d2337a529")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/golang/glog")
               (commit (go-version->git-ref version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "1hnbln6h61ik9z92dspybmb0cxpddm1c4dzx5g64jr8cdvqcgpji"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path "github.com/golang/glog"))
    (home-page "https://github.com/golang/glog")
    (synopsis "glog")
    (description
      "Package glog implements logging analogous to the Google-internal C++ INFO/ERROR/V setup.
It provides functions Info, Warning, Error, Fatal, plus formatting variants such as
Infof.  It also provides V-style logging controlled by the -v and -vmodule=file=2 flags.
")
    (license l:asl2.0)))

(define-public go-github-com-envoyproxy-go-control-plane
  (package
    (name "go-github-com-envoyproxy-go-control-plane")
    (version "0.9.9")
    (source
      (origin
        (method git-fetch)
        (uri (git-reference
               (url "https://github.com/envoyproxy/go-control-plane")
               (commit (string-append "v" version))))
        (file-name (git-file-name name version))
        (sha256
          (base32
            "1cb3s6x2jx93cdljb9jwp2wc2iljv91h7706gq1amkkwdhdxhcdv"))))
    (build-system go-build-system)
    (arguments
      '(#:import-path
        "github.com/envoyproxy/go-control-plane"))
    (propagated-inputs
      `(("go-google-golang-org-protobuf"
         ,go-google-golang-org-protobuf)
        ("go-google-golang-org-grpc"
         ,go-google-golang-org-grpc)
        ("go-google-golang-org-genproto"
         ,go-google-golang-org-genproto)
        ("go-go-opentelemetry-io-proto-otlp"
         ,go-go-opentelemetry-io-proto-otlp)
        ("go-github-com-stretchr-testify"
         ,go-github-com-stretchr-testify)
        ("go-github-com-prometheus-client-model"
         ,go-github-com-prometheus-client-model)
        ("go-github-com-google-go-cmp"
         ,go-github-com-google-go-cmp)
        ("go-github-com-golang-protobuf"
         ,go-github-com-golang-protobuf)
        ("go-github-com-envoyproxy-protoc-gen-validate"
         ,go-github-com-envoyproxy-protoc-gen-validate)
        ("go-github-com-cncf-xds-go"
         ,go-github-com-cncf-xds-go)
        ("go-github-com-census-instrumentation-opencensus-proto"
         ,go-github-com-census-instrumentation-opencensus-proto)))
    (home-page
      "https://github.com/envoyproxy/go-control-plane")
    (synopsis "control-plane")
    (description
      "This repository contains a Go-based implementation of an API server that
implements the discovery service APIs defined in
@url{https://github.com/envoyproxy/data-plane-api,data-plane-api}.")
    (license l:asl2.0)))

(define-public go-github-com-apache-arrow-go-arrow
  (package
    (name "go-github-com-apache-arrow-go-arrow")
    (version "0.0.0-20210702113516-d7a8b468ab64")
    (source (origin (method git-fetch)
                    (uri (git-reference
                          (url "https://github.com/apache/arrow")
                          (commit (go-version->git-ref version))))
                    (file-name (git-file-name name version))
                    (sha256
                     (base32
                      "1s6dyykpirszf879msr7zqc319cd3ylz2hf4yh83p672l4d1m49c"))))
    (build-system go-build-system)
    (arguments
     '(#:import-path "github.com/apache/arrow"))
    (propagated-inputs
     `(("go-google-golang-org-protobuf"
        ,go-google-golang-org-protobuf)
       ("go-google-golang-org-grpc"
        ,go-google-golang-org-grpc)
       ("go-google-golang-org-genproto"
        ,go-google-golang-org-genproto)
       ("go-golang-org-x-xerrors"
        ,go-golang-org-x-xerrors)
       ("go-golang-org-x-text" ,go-golang-org-x-text)
       ("go-golang-org-x-sys" ,go-golang-org-x-sys)
       ("go-golang-org-x-net" ,go-golang-org-x-net)
       ("go-golang-org-x-sync" ,go-golang-org-x-sync)
       ("go-github-com-stretchr-testify"
        ,go-github-com-stretchr-testify)
       ("go-github-com-pmezard-go-difflib"
        ,go-github-com-pmezard-go-difflib)
       ("go-github-com-pierrec-lz4-v4"
        ,go-github-com-pierrec-lz4-v4)
       ("go-github-com-klauspost-compress"
        ,go-github-com-klauspost-compress)
       ("go-github-com-google-go-cmp"
        ,go-github-com-google-go-cmp)
       ("go-github-com-google-flatbuffers"
        ,go-github-com-google-flatbuffers)
       ("go-github-com-golang-protobuf"
        ,go-github-com-golang-protobuf)
       ("go-github-com-davecgh-go-spew"
        ,go-github-com-davecgh-go-spew)))
    (home-page "https://github.com/apache/arrow")
    (synopsis
     "Package arrow provides an implementation of Apache Arrow.\n")
    (description
     "Package arrow provides an implementation of Apache Arrow.\n")
    (license l:asl2.0)))

#;(define-public-go-package "github.com/apache/arrow"
  "Apache Arrow go"
  #:inputs `(("go-golang-org-x-xerrors" ,go-golang-org-x-xerrors)
             ("go-golang.org-x-sync-errgroup", go-golang.org-x-sync-errgroup))
  #:phases '(modify-phases %standard-phases
              (replace 'build
                (lambda* _
                  (with-throw-handler
    #t
    (lambda _
      (invoke "pwd")
      (invoke "go" "install"
              "-v" ; print the name of packages as they are compiled
              "-x" ; print each command as it is invoked
              ;; Respectively, strip the symbol table and debug
              ;; information, and the DWARF symbol table.
              "-ldflags=-s -w" "github.com/apache/arrow/go/arrow"))
    (lambda (key . args)
      (display (string-append "Building '" "' failed.\n"
                              "Here are the results of `go env`:\n")) (invoke "go" "env")))))))

;; go-github-com-influxdata-flux
(define-public-go-package "github.com/influxdata/flux"
  "Flux is a lightweight scripting language for querying databases"
  #:inputs `(("go-github-com-apache-arrow-go-arrow"
              ,go-github-com-apache-arrow-go-arrow)))



;; go-github-com-influxdata-influxdb
(define-public-go-package "github.com/influxdata/influxdb" "Scalable datastore for metrics, events, and real-time analytics"
  #:inputs `(("go-github-com-burntsushi-toml"
              ,go-github-com-burntsushi-toml)
             ("go-github-com-influxdata-flux"
              ,go-github-com-influxdata-flux)))














#+end_src
