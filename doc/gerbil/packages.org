#+TITLE: Gerbil Packages: gxpkg in Druix

* Default ~gxpkg~'s

The ~gxpkg~ procedure.

#+begin_src scheme :noweb-ref make-gxpkg
(define* (gxpkg druix-version synopsis home-page license inputs
                     #:key
                     (description synopsis)
                     (name (v:name druix-version))
                     (arguments '())
                     #:allow-other-keys)
  (let ((v druix-version))
    (package
      (name name) (synopsis synopsis) (license license)
      (home-page home-page) (description description)
      (build-system gerbil-build-system) (inputs inputs)
      (version (v:druix-version v))
      (arguments arguments)
      (source
       (origin
         (method git-fetch)
         (uri (git-reference
               (url (v:repo v))
               (commit (v:commit v))))
         (file-name (git-file-name name (v:commit v)))
         (sha256 (base32 (v:sha256 v)))))
      )))
#+end_src


* The ~:clan~ friends: ~gxpkg/clan~

Like many things, for example Gambit's [[./../scheme/gambit.org::#stampH][~include/stamp.h~]], these packages have
something that is there for release and auto-generated using *git* for
development.

Because ~druix~ is mostly bleedin' edge, and we cannot use the ~.git~ as it
constantly changes, we need to to so manually.

** The clan ~version.ss~

For example, our first package is the ~:clan~ module, ~gerbil-utils~, which is
apparently named "Gerbil-utils".

This is from building it manually which was done as follows. First we defined a
package for it that had the dependencies. Then built manually.

#+begin_src shell
git clone git@github.com:fare/gerbil-utils.git ; cd gerbil-utils;

guix environment -L ~/me/guix/src/druix/ gerbil-utils
./build.ss

[...]
#+end_src

That outputs this file in "version.ss".

#+begin_src scheme
(import :clan/versioning)
(register-software "Gerbil-utils" "v0.0-318-g806ee9a") ;; 2021-05-10
#+end_src

So we need to emulate it. Before doing so it's worthwhile to look at our second
one which relies on the first.

*Note*: We can use the ~gerbil-utils~ *guix package* as the environment.

#+begin_src shell
git clone git@github.com:fare/gerbil-poo.git ; cd gerbil-poo;
guix environment -L ~/me/guix/src/druix/ gerbil-utils
./build.ss
#+end_src

#+begin_src scheme
(import :clan/versioning :clan/version)
(register-software "Gerbil-poo" "8ab28ef") ;; 2021-05-21
#+end_src

And a third which relies on the second and first.

#+begin_src shell
git clone git@github.com:fare/gerbil-crypo.git ; cd gerbil-crypto;
guix environment -L ~/me/guix/src/druix/ gerbil-utils
./build.ss
#+end_src

#+begin_src scheme
(import :clan/versioning :clan/version :clan/poo/version)
(register-software "Gerbil-crypto" "4c7c4a8") ;; 2021-05-10
#+end_src


So, from the top down, first, there are the gerbil imports and the registration
of a software with name and version. And a comment for the date.

#+begin_src scheme :noweb-ref string<-clan-version
(define* (string<-clan-version name version imports date)
  (with-output-to-string
    (lambda ()
      (write (cons* 'import ':clan/versioning imports))
      (newline) (write `(register-software ,name ,version))
      (display " ;; ") (display date)
      (newline))))
#+end_src

Let's try it out.

#+begin_src scheme
(display (string<-clan-version
          "Gerbil-crypto" "4c7c4a8" '(:clan/version :clan/poo/version)
          20210521))
#+end_src
*=>*
#+begin_src scheme
(import :clan/versioning :clan/version :clan/poo/version)
(register-software "Gerbil-crypto" "4c7c4a8") ;; 20210521
#+end_src

Close enough. Now, the name is different than the package name and the import
module name different as well.


** Package Arguments

To cover that we'll add some arguments to the package. That makes it pass the
~clan-package?~ test.

#+begin_src scheme
#:clan '(#:software-name "Gerbil-utils"
         #:gerbil-package "clan"
         #:version-path "version")
#+end_src

Those can be used to generate the file AND have the dependencies know how to
import it.

#+begin_src scheme :noweb-ref clan-package?
(define (clan-package? pkg)
  (apply (lambda* (#:key (clan #f) #:allow-other-keys) clan)
   (package-arguments pkg)))
#+end_src

Using that we can create a package. You can see the end result [[file:clan.org::#gerbilUtils][here.]]

** Turn ~inputs~ to ~(import ...)~'s

If an input is in fact a ~clan-package?~ then we have all we need to create the import symbol

#+begin_src scheme :noweb-ref imports<-inputs
(define (imports<-inputs inputs)
  (define (import-symbol clan)
    (apply (lambda* (#:key gerbil-package version-path #:allow-other-keys)
             (string->symbol (string-append ":" gerbil-package "/" version-path)))
           clan))
  (map import-symbol (filter identity (map clan-package?
                                           (map cadr inputs)))))
#+end_src

** Add a ~create-clan-version~ phase

We modify the #:phases. We must make sure to carry the parent with us.

#+begin_src scheme :noweb-ref package-with-clan-version
(define (package-with-clan-version pkg date)
  (define clan (clan-package? pkg))
  (define args (package-arguments pkg))
  (define imports (imports<-inputs (package-inputs pkg)))

  (define* vstr
    (string<-clan-version
     (plist-get clan #:software-name)
     (string-append "v" (package-version pkg))
     imports date))
  (define vpath
    (string-append (plist-get clan #:version-path) ".ss"))

  (define our-phases
    (let-keywords
     (package-arguments pkg) #t
     ((phases '%standard-phases))
     `(begin
        (let ((old-phases ,phases))
          (modify-phases old-phases
            (add-before 'copy-source 'write-clan-version
              (lambda _
                (with-output-to-file ,vpath
                  (lambda () (display ,vstr)))
                (invoke "echo" "Made" ,vpath "from: \n" ,vstr)
                #t)))))))

  (define parent-args (plist-delete args #:phases))

  (package
    (inherit pkg)
    (arguments (cons* #:phases our-phases parent-args))))
#+end_src


** ~gxpkg/clan~ time

#+begin_src scheme :noweb-ref gxpkg/clan
(define* (gxpkg/clan druix-version synopsis home-page license inputs
                     #:key clan #:allow-other-keys #:rest args)

  (let ((parent
         (apply gxpkg druix-version synopsis home-page license inputs args)))
   (package-with-clan-version
     (package
       (inherit parent)
       (arguments `(#:clan ,clan ,@(package-arguments parent))))
     ((@ (druix versions) ymd) druix-version))))
#+end_src

* /File/ ~druix/utils/gerbil-packages.scm~

#+begin_src scheme :tangle "../../druix/utils/gerbil-packages.scm" :noweb yes :mkdirp t
(define-module (druix utils gerbil-packages)
  #:use-module (druix utils)
  #:use-module (druix utils plists)
  #:use-module (druix build-system gerbil)
  #:use-module ((druix versions) #:prefix v:)
  #:use-module (guix packages)
  #:use-module (gnu packages)
  #:use-module (ice-9 optargs)
  #:use-module (gnu packages base)
  #:use-module (guix git-download)
  #:use-module (guix build utils)
  #:use-module (druix build gerbil-build-system)
  #:export (gxpkg gxpkg/clan clan-package?))

<<make-gxpkg>>

<<clan-package?>>

<<string<-clan-version>>

<<imports<-inputs>>

<<package-with-clan-version>>

<<gxpkg/clan>>
#+end_src
