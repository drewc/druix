#+TITLE: Gerbil Builder: Build libs and apps


* Locations: Where to place what?

- ~/.gerbil/pkg :: */share/gerbil*
- ~/.gerbil/lib :: */lib/gerbil*
- ~/.gerbil/bin :: */bin*


* ~GERBIL_LOADPATH~

The environment variable ~GERBIL_LOADPATH~, tells *Gerbil* where to find the
modules to load.

#+begin_src scheme
(define (gerbil-load-path paths)
  (define glps (or (let ((p (getenv "GERBIL_LOADPATH")))
                     (and p (list p)))
                  '()))
  (string-join (append glps paths) ":"))
#+end_src

* ~(druix build gerbil-build-system)~ The build expression

Guix compiles the expression that builds a package at "runtime". Those forms
come from here.



#+begin_src scheme :tangle "../../druix/build/gerbil-build-system.scm"
(define-module (druix build gerbil-build-system)
  #:use-module ((guix build gnu-build-system) #:prefix gnu:)
  #:use-module (guix build utils)
  #:export (%standard-phases gerbil-build))

(define %lib-prefix "/lib/gerbil")
(define %pkg-prefix "/share/gerbil")

(define (setenv-GERBIL_LOADPATH inputs)
  (define paths (map (lambda (i) (if (pair? i) (cdr i) i))
                     inputs))
  (invoke "echo" (car paths))
  (setenv "GERBIL_LOADPATH"
          (string-join
           (append
            (let ((v (getenv "GERBIL_LOADPATH")))
              (if v (list v) '()))
            (map (lambda (p) (string-append p "/lib/gerbil"))
               paths))
           ":")))



(define (gxpkg-name outputs)
  (let* ((out (assoc-ref outputs "out")))
    (package-name->name+version
     (strip-store-file-name out))))

(define (gxpkg-source-directory outputs)
  (let ((out (assoc-ref outputs "out")))
    (string-append out %pkg-prefix "/" (gxpkg-name outputs))))

(define (gxpkg-lib-directory outputs)
  (let ((out (assoc-ref outputs "out")))
    (string-append out %lib-prefix)))

(define* (copy-source #:key outputs #:allow-other-keys)
  (copy-recursively "." (gxpkg-source-directory outputs))
  #t)

(define* (configure #:key inputs outputs #:allow-other-keys)
  (let ((gpath (gxpkg-lib-directory outputs)))
    (setenv "GERBIL_BUILD_CORES" (getenv "NIX_BUILD_CORES"))
    (setenv "GERBIL_PATH" gpath)
    (setenv-GERBIL_LOADPATH inputs)
    (setenv "GAMBOPT" "i8,f8,-8,t8")
    #t))

(define (empty-directory? path)
  (define d (opendir path))
  (eof-object? (begin (readdir d) (readdir d) (readdir d))))

(define* (build #:key outputs (build-script "./build.ss") #:allow-other-keys)
  (with-directory-excursion (gxpkg-source-directory outputs)
    (invoke build-script))

  (let ((out (assoc-ref outputs "out"))
        (bin (string-append (gxpkg-lib-directory outputs)
                                              "/bin")))
    (if (not (empty-directory? bin))
      (copy-recursively bin (string-append out "/bin"))))'
  #t)

(define %standard-phases
  (modify-phases gnu:%standard-phases
    (delete 'bootstrap)
    (replace 'configure configure)
    (add-before 'configure 'copy-source copy-source)
    ;; (delete 'build)
    (delete 'check)
    (replace 'build build)
   ;; (replace 'check check)
    (delete 'install)
   ; (replace 'strip strip)
    (delete 'strip)
    ))

(define* (gerbil-build
          #:key inputs
          (phases %standard-phases)
          #:allow-other-keys #:rest args)
  (apply gnu:gnu-build
         #:inputs inputs
         #:phases phases
         args))



#+end_src

* ~(druix build-system gerbil)~, the use of building

#+begin_src scheme :tangle "../../druix/build-system/gerbil.scm"
(define-module (druix build-system gerbil)
  #:use-module (guix build-system)
  #:use-module (guix build-system gnu)
  #:use-module (guix build utils)
  #:use-module (guix utils)
  #:use-module (guix packages)
  #:use-module (guix derivations)
  #:use-module (ice-9 match)
  #:use-module (guix search-paths)
  #:export (%standard-phases
            gerbil-build
            gerbil-build-system))

(define %gerbil-build-modules
  '((druix build gerbil-build-system)
    (guix build utils)))

(define %gerbil-build-system-modules
  (append %gerbil-build-modules
          %gnu-build-system-modules))

(define* (gerbil-build
          store name inputs
                  #:key
                  source outputs
                  (tests? #t)
                  (phases '(@ (druix build gerbil-build-system)
                              %standard-phases))
                  (system (%current-system))
                  (search-paths '())
                  (imported-modules %gerbil-build-system-modules)
                  (guile #f)
                  (modules %gerbil-build-modules) #:allow-other-keys)
  (define builder
    `(begin
       (use-modules ,@modules)
       (gerbil-build #:name ,name
                     #:system ,system
                     #:source ,(match (assoc-ref inputs "source")
                                   (((? derivation? source))
                                    (derivation->output-path source))
                                   ((source) source)
                                   (source source))
                     #:phases ,phases
                     #:outputs %outputs
                     #:inputs %build-inputs
                     #:search-paths ',(map search-path-specification->sexp
                                             search-paths))))
  (define guile-for-build
    (match guile
      ((? package?)
       (package-derivation store guile system #:graft? #f))
      (#f
       (let* ((distro (resolve-interface '(gnu packages commencement)))
              (guile (module-ref distro 'guile-final)))
         (package-derivation store guile system #:graft? #f)))))

  (build-expression->derivation store name builder
                                #:inputs inputs
                                #:system system
                                #:modules imported-modules
                                #:outputs outputs
                                #:guile-for-build guile-for-build))

(define* (lower name #:key source inputs outputs native-inputs system target
                #:allow-other-keys #:rest arguments)
  (define private-keywords
    '(#:target #:inputs #:native-inputs ))
  (bag
    (name name)
    (system system)
    (host-inputs `(,@(if source
                         `(("source" ,source))
                         '())
                   ,@inputs
                   ,@(standard-packages)))
    (build-inputs native-inputs)
    (outputs outputs)
    (build gerbil-build)
    (arguments (strip-keyword-arguments private-keywords arguments))))

(define gerbil-build-system
  (build-system
    (name 'gerbil)
    (description "The build system for Gerbil packages")
    (lower lower)))


#+end_src
