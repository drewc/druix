#+TITLE: Gerbil, a Meta-Scheme


* Versions for packages

The ~(druix versions)~ module has an ~ensure-druix-versions~ that grabs things
from upstream and makes a version that can be packaged.

#+begin_src scheme
(use-modules ((druix versions) #:prefix v:))
(v:ensure-druix-versions
 'gerbil v:<druix-version-git>
 #:repo "https://github.com/vyzo/gerbil.git")

;; => "/home/drewc/me/guix/src/druix/druix/versions/gerbil.scm"
#+end_src

It makes/updates a list of versions stored in a file.

ie:

#+begin_src scheme
(define-module (druix versions gerbil)
  #:use-module (druix versions)
  #:use-module (oop goops) #:export (versions))
(define versions
  (list
    (make <druix-version-git>
      #:major 0 #:minor 16 #:patch #f #:revision 192 #:ymd 20210608 #:hms 122759
      #:sha256 "0jm331giq0m73l66xc9mjzzbvmg4jxqkmcxc68fjywrcxa07xx31"
      #:repo "https://github.com/vyzo/gerbil.git"
      #:commit "fa9537be0848e54d2c68165503b9cc48babb9334")

    (make <druix-version-git>
      #:major 0 #:minor 16 #:patch #f #:revision 188 #:ymd 19700101 #:hms 0
      #:sha256 "1br42b7slyas4cjs0hhh85s9s0inag3d85jva8ym4di0k756v327"
      #:repo "https://github.com/vyzo/gerbil.git"
      #:commit "237627a4bf573e372ed3cd539a35c0f8477b8879")

    (make <druix-version-git>
      #:major 0 #:minor 16 #:patch #f #:revision 187 #:ymd 19700101 #:hms 0 #:sha256 "0yqsjyk1gzfnvp4rvs8q06v7vcdgbnpw9bpa03f36zkzp466gdyl" #:repo "https://github.com/vyzo/gerbil.git" #:commit "7e8b4baaf563b7cd804b3b653d4823b9762f5c87")))

#+end_src


** A few ~gerbil-unstable~ packages

Using the automagic versions that are from the HEAD of the main/master branch we'll make them all unstable versions.

#+begin_src scheme :noweb-ref gerbil-packages
(define-public gerbil-packages
  (map make-gerbil-package (@ (druix versions gerbil) versions)))
#+end_src

To actually be visable to ~guix package --list-available='^gerbil*'~ they must be exported.

#+begin_src scheme :noweb-ref gerbil-packages
(for-each export-package gerbil-packages)
#+end_src

That allows it to be seen!

#+begin_src shell
$ guix package -L ~/me/guix/src/druix/ --list-available='^gerbil*'
gerbil  0.16    out     gnu/packages/scheme.scm:920:2
gerbil-unstable 0.16-187-g7e8b4baa      out     /home/drewc/me/guix/src/druix/druix/packages/scheme/gerbil.scm:72:4
gerbil-unstable 0.16-188-g237627a4      out     /home/drewc/me/guix/src/druix/druix/packages/scheme/gerbil.scm:72:4
gerbil-unstable 0.16-192-gfa9537be      out     /home/drewc/me/guix/src/druix/druix/packages/scheme/gerbil.scm:72:4
#+end_src

** The default ~(define-public gerbil-unstable [...])~

We also want to export a ~gerbil-unstable~ for other guile modules to use.

#+begin_src scheme :noweb-ref gerbil-unstable
(define-public gerbil-unstable (car gerbil-packages))
#+end_src

#+begin_src scheme :tangle "../druix/packages/scheme/gerbil.scm" :noweb yes
(define-module (druix packages scheme gerbil)
  #:use-module (druix packages scheme gambit-c)
  #:use-module (gnu packages commencement)
  #:use-module (gnu packages linux)
  #:use-module (druix utils)
  #:use-module (gnu packages scheme)
  #:use-module ((druix versions gerbil) #:prefix dvg:)
  #:use-module ((druix versions) #:prefix v:)
  #:use-module (guix packages)
  #:use-module (guix build-system gnu)
  #:use-module ((guix licenses) #:prefix l:)
  #:use-module (gnu packages compression)
  #:use-module (gnu packages)
  #:use-module (gnu packages base)
  #:use-module (guix git-download)
  #:use-module (guix derivations)
  #:use-module (gnu packages tls)
  #:use-module (gnu packages web)
  #:use-module (druix packages sql sqlite)
  #:use-module (gnu packages xml)
  #:use-module (gnu packages databases)
  #:use-module (guix store))

#;(define unstable-version (car dvg:versions))

(define (make-gerbil-unstable-configure-form flags)
  `(lambda* (#:key build target native-inputs inputs outputs
             (configure-flags '()) out-of-source?
             #:allow-other-keys)
     (let* ((gambc (with-directory-excursion
                    (string-append (dirname (which "gsc"))
                                   "/../")
                    (getcwd)))
            (with-g (string-append "--with-gambit=" gambc))
            (conflags (list with-g ,@flags))
            (conf (assoc-ref %standard-phases 'configure)))
       (conf #:build build #:target target #:native-inputs native-inputs
             #:inputs inputs #:outputs outputs
             #:configure-flags conflags))))

(define gerbil-unstable-before-build-form
  '(lambda _
     (invoke "chmod" "-R" "777" ".")
     (setenv "PATH" (string-append (getcwd) "/bin:" (getenv "PATH")))
     (setenv "GERBIL_GXC" (string-append (getcwd) "/bin/gxc"))
     (setenv "GERBIL_BASE" (getcwd))
     (setenv "GERBIL_HOME" (getcwd))
     (setenv "GERBIL_PATH" (getcwd))
     #t))

;;; Gerbil uses itself to compile itself. Because we patch #!/usr/bin/env, and
;;; some of what are called "generated-file"'s rely on a shebang that works, we
;;; fake them here.

(define gerbil-unstable-fake-/bin
  '(lambda _
     (setenv "PATH"
             (string-append (getcwd) "/bin:" (getenv "PATH")))
     (for-each (lambda (exe)
                 (invoke "touch" exe) (invoke "chmod" "755" exe))
               '("bin/gxi" "bin/gxi-script" "bin/gxc"))
  #t))

(define* (make-gerbil-package version #:optional (name "gerbil-unstable"))
   (let* ((v (v:druix-version version))
         (c (v:commit version))
         (s (v:sha256 version))
         (git-uri (v:repo version))
         (pv (string-append "PACKAGE_VERSION=v" v ""))
         (configure-flags
          `(,pv "--enable-libxml" "--enable-libyaml" "--enable-zlib"
                "--enable-sqlite" "--enable-mysql" "--enable-lmdb"
                "--enable-leveldb")))
    (package
      (inherit gerbil)
      (name name)
      (version v)
      (source
       (origin
         (method git-fetch)
         (uri
          (git-reference (url git-uri)
                         (commit c)))
         (sha256 (base32 s))
         (file-name (git-file-name name s))))
      (build-system gnu-build-system)
      (arguments
       `(#:phases
         (modify-phases %standard-phases
           (delete 'check)
           (replace 'configure
             ,(make-gerbil-unstable-configure-form configure-flags))
          (add-before 'build 'set-build-environment
            ,gerbil-unstable-before-build-form)
          (add-before 'patch-generated-file-shebangs 'fake-bin
            ,gerbil-unstable-fake-/bin))))
      (propagated-inputs `(("gambit-c-unstable" ,gambit-c-unstable)
                #;("gcc-toolchain" ,gcc-toolchain)
                #;("linux-headers" ,linux-libre-headers)))
      (native-inputs `(("gambit-c-unstable" ,gambit-c-unstable)
                       ("openssl" ,openssl)
                       ("lmdb" ,lmdb)
                       ("leveldb" ,leveldb)
                       ("sqlite" ,sqlite)
                       ("mysql" ,mysql)
                       ("libyaml" ,libyaml)
                       ("libxml2" ,libxml2)
                       ("zlib" ,zlib))  ))))


<<gerbil-packages>>

<<gerbil-unstable>>

#+end_src
