#+TITLE: Versions: Auto-magic "unstable" revisions

As a bleeding-edge hacker I often need to use the last commit in the main/master branch as a starting point. Then, I may need a commit that was that, but now is in the past.

It could be all defined manually, but as a programmer we program programs, so here we go.

* Usage

We want to package *Gerbil*[fn:0] which is a meta-dialect of scheme. To do that
we go meta on *Guile*! :)

** Ensure a new "versions" module

All we need to do is this.

#+begin_src scheme
(v:ensure-druix-versions
 'gerbil v:<druix-version-git>
 #:repo "https://github.com/vyzo/gerbil.git")
#+end_src

What that does the first time around is create a file
~./druix/versions/gerbil.scm~ that looks like the following.

#+begin_src scheme
(define-module (druix versions gerbil)
  #:use-module (druix versions) #:use-module (oop goops) #:export (versions))
(define versions
  (list
    (make <druix-version-git>
      #:major 0 #:minor 16 #:patch #f #:revision 187
      #:sha256 "0yqsjyk1gzfnvp4rvs8q06v7vcdgbnpw9bpa03f36zkzp466gdyl"
      #:repo "https://github.com/vyzo/gerbil.git"
      #:commit "7e8b4baaf563b7cd804b3b653d4823b9762f5c87")))
#+end_src



* Entry Point: ~ensure-druix-versions~ creates a (druix versions ...) module
:PROPERTIES:
:CUSTOM_ID: ensureDruixVersions
:END:


To create a derivation a source tree with a verified *sha256* hash is required.
Really that's all we care about. ~ensure-druix-versions~ sets it up so that is
auto-magically taken from a module.

#+begin_src scheme :noweb-ref ensure-druix-versions
(define* (ensure-druix-versions
          sname #:optional (klass <druix-version-git>)
          #:key (name (if (string? sname) sname (symbol->string sname)))
          #:allow-other-keys #:rest args)
  (ensure-druix-versions-from-object
   sname (apply make klass #:name name args)))
#+end_src

While that returns what we need, that's not all it does. Watch.

#+begin_src scheme
(define versions
  ((@ (druix versions) ensure-druix-versions)
   'druix #:repo "https://github.com/drewc/druix.git"))
#+end_src

By pointing to almost[fn:1] any repo we not only get the sha256 but a whole lot
more. First off imagine a version as a form that makes a versions. Meta.

#+begin_src scheme
(map (@ (druix versions) form<-druix-version) versions)

;; => ((make <druix-version-git>
;;  #:name "druix" #:major 0 #:minor 0
;;  #:patch #f #:revision 22 #:ymd 20210616 #:hms 32910
;;  #:sha256 "01f6yq173id1bf0pr08pz5sgwhr3l3xhalsz2m56pm6gl99ig1wx"
;;  #:repo "https://github.com/drewc/druix.git"
;;  #:commit "21e58ac74b90dc51d7c9e98b69edc835215228f0"))
#+end_src

Because we do not set a ~major~ or ~minor~ the semantic version is, by default
for some repos, *0.0*.

But note the ~revision~, ~ymd~, ~hms~ and ~commit~? Where do they come from?

There's a function, [[#druixVersionGitRepo][~druix-version<-git-repo~]], that does so for us, and allows a
version number string that climbs every time.

We call that string a ~druix-version~.

#+begin_src scheme
(define latest (car versions))
((@ (druix versions) druix-version) latest) ;; => "0.0-22-g21e58ac7"
#+end_src

With all of that we have what is needed to make a *guix package*. Yay!


** The Module File: ~#:export (versions latest)~

We cannot lookup the version every time we want to load a package. And we must
note that it is a list of versions created.

Multiple versions need stored somewhere and our ~ensure~ did just that.

Essentially ~(@ (druix version [...]) latest)~ is what is left behind.

#+begin_src scheme
((@ (druix versions) druix-version)
 (@ (druix versions druix) latest)) ;; => "0.0-22-g21e58ac7"
#+end_src

That's all done and eventually output to a file port by
~string<-druix-module-definition~.

#+begin_src scheme :noweb-ref string<-druix-module-definition
(define (string<-druix-module-definition name versions)
  ;; => string
  (with-output-to-string
    (lambda ()
      (write (form<-define-versions-module name))
      (newline)
      (display (string<-druix-versions versions))
      (newline)
      (write '(define latest (car versions)))
      (newline))))
#+end_src

To boot:

#+begin_src scheme
(display
 ((@ (druix versions) string<-druix-module-definition)
  'this-is-the-module-and-file-name
  (@ (druix versions druix) versions)))

;; (define-module (druix versions this-is-the-module-and-file-name)
;;   #:use-module (druix versions) #:use-module (oop goops)
;;   #:export (versions latest))
;;
;;
;; (define versions
;;   (list
;;    (make <druix-version-git> #:name "druix"
;;          #:major 0 #:minor 0 #:patch #f #:revision 22 #:ymd 20210616 #:hms 32910
;;          #:sha256 "01f6yq173id1bf0pr08pz5sgwhr3l3xhalsz2m56pm6gl99ig1wx" #:repo
;;          "https://github.com/drewc/druix.git" #:commit
;;          "21e58ac74b90dc51d7c9e98b69edc835215228f0")))

;; (define latest (car versions))

#+end_src

And note the module name can differ from the version name.


** A list of ~versions~

One of the reasons we keep a list of versions is because we may want to keep the
previous version around.

For example: right now I'll commit and push this literate file up to this point
for demonstrative purposes.

Now to run the ~ensure-druix-versions~ again.

#+begin_src scheme
(define versions
  ((@ (druix versions) ensure-druix-versions)
   'druix #:repo "https://github.com/drewc/druix.git"))
#+end_src

Because I just commited, and there was a previous version, there are now two
versions. with different revisions and commits.

#+begin_src scheme
(map (@ (druix versions) druix-version) versions)
;; => ("0.0-23-g0043ff3c" "0.0-22-g21e58ac7")
#+end_src

The fact that happens automatically is a big plus.

** Version Numbers: Manual or Automatic

Sometimes a manual transmission is in fact needed. If there is nothing else to
go by we set our semantic version to [[#ensureDruixVersions][0.0]].

#+begin_src scheme
(define versions
  ((@ (druix versions) ensure-druix-versions)
   'druix #:repo "https://github.com/drewc/druix.git"
   #:patch 42))
#+end_src

But what if we decide that we want, say, a patch number? Because the actual
commit is the same we end up with just two versions, but the latest a wee bit
different.

#+begin_src scheme
(map (@ (druix versions) druix-version) versions)
;; => ("0.0.42-23-g0043ff3c" "0.0-22-g21e58ac7")
#+end_src

Yet, the entire point behind ~(druix versions)~ is auto-magic.

Often, these days, a git repository is tagged and annotated with the version.

As an example, now I'll add the first tag to a druix repo.

#+begin_quote
Annotated tags are meant for release while lightweight tags are meant for
private or temporary object labels. For this reason, some git commands for
naming objects (like git describe) will ignore lightweight tags by default.

-- ~man git tag~
#+end_quote

Ok! Let's do it.

#+begin_src shell
git tag -a 'v0.1' -m "Add a first minor release tag"
git push --tags
#+end_src

What happens to the versions now? We can drop our manual ~patch~, release the
clutch and go back to auto-magic.

#+begin_src scheme
(define versions
  ((@ (druix versions) ensure-druix-versions)
   'druix #:repo "https://github.com/drewc/druix.git"))
#+end_src

That magic is great. We are now at a minor release but the same commit.

#+begin_src scheme
(map (@ (druix versions) druix-version) versions)
;; => ("0.1-g0043ff3c" "0.0-22-g21e58ac7")
#+end_src

Also note there is no revision. ~git describe --tags~ is what is used to get the
version number which we then somewhat recreate.


** The details of the implementation

#+begin_src scheme :noweb-ref and-ensure-druix-versions
(define (get-druix-versions-path pkg-name)
  (%search-load-path
   (string-append "druix/versions/" (symbol->string pkg-name))))

(define (druix-versions-folder)
  (string-append (dirname (%search-load-path "druix/versions"))
                 "/versions"))

(define (find-druix-versions pkg-name)
  (define dvp (get-druix-versions-path pkg-name))
  (if (not dvp) #f
      (eval `(@ (druix versions ,pkg-name) versions)
            (interaction-environment))))

(define (write-druix-versions-file name versions)
  (define vfldr (druix-versions-folder))
  (define fname (string-append vfldr "/" (symbol->string name) ".scm"))
  (with-output-to-file fname
    (lambda () (display (string<-druix-module-definition name versions))))
  fname)

(define-generic ensure-druix-versions-from-object)
(define-method (ensure-druix-versions-from-object
                sym (obj <druix-version-git>))
  (define vpath (get-druix-versions-path sym))
  (define vfldr (druix-versions-folder))
  (let* ((repo (ensure-git-repo (repo obj)))
         (oldvs (if vpath (find-druix-versions sym) '()))
         (newv (let ((nv (druix-version<-git-repo (class-of obj) repo)))
                 (set! (name nv) (name obj))
                 (if (not (major nv))
                     (set! (major nv) (major obj)))
                 (if (not (minor nv))
                     (set! (minor nv) (minor obj)))
                 (if (not (patch nv))
                     (set! (patch nv) (patch obj)))
                 nv))
         (restvs (if (null? oldvs) oldvs
                     (if (equal? (commit (car oldvs)) (commit newv))
                         (cdr oldvs)
                         oldvs)))
         (versions (cons newv restvs)))
    (write-druix-versions-file sym versions)
    (let ((m (resolve-module `(druix versions ,sym))))
     (and m (reload-module m)))
    versions))

#+end_src
* Version Numbers

Versioning is very important. Most of the time we simply want the most "recent",
so often care not. That means the care is placed on the package manager, which
in this case is defined by us.

Meta-circles aside, we do need to have a versioning that makes sense to both the
end user and the package management software.

** First Case, gambit-c-unstable.
:PROPERTIES:
:CUSTOM_ID: versionFirstCase
:END:

In the end what we desire for our first case is the following file used to
auto-generate "itself" with a newer version.

#+begin_src scheme :tangle ../druix/versions/gambit-c-unstable.scm :mkdirp t
(define-module (druix versions gambit-c-unstable)
  #:use-module (druix versions)
  #:use-module (oop goops)
  #:export (versions))

(define versions
  (list
   (make <druix-version-git>
    #:major 4 #:minor 3 #:patch 9 #:revision 0
    #:sha256 "17f1zyvs0qazqbqczbsspqrz2vzsabg8kbz2xf1z5x6xxxvkqimc"
    #:repo "https://github.com/gambit/gambit.git"
    #:commit "1d5b01330881b3e26345dbaabfd35bbdfae36330")))
#+end_src

** ~<druix-version>~ class

#+begin_src scheme :noweb-ref druix-version-class
;;; (use-modules (oop goops))

(define-class <druix-version> ()
  (name #:accessor name #:init-value "unnamed" #:init-keyword #:name)
  (major #:accessor major #:init-value 0 #:init-keyword #:major)
  (minor #:accessor minor #:init-value 0  #:init-keyword #:minor)
  (patch #:accessor patch #:init-value #f #:init-keyword #:patch)
  (revision #:accessor revision #:init-value #f #:init-keyword #:revision)
  (ymd #:accessor ymd #:init-value 19700101 #:init-keyword #:ymd)
  (hms #:accessor hms #:init-value 000000 #:init-keyword #:hms)
  (sha256 #:accessor sha256 #:init-value #f #:init-keyword #:sha256))
#+end_src

** ~druix-version~ generic function

#+begin_src scheme :noweb-ref druix-version-fn
(define-generic druix-version)

(define-method (druix-version (v <druix-version>))
  (string-append
   (number->string (major v)) "."
   (number->string (minor v))
   (let ((p (patch v)))
     (if p (string-append "." (number->string p)) ""))
   (let ((rev (revision v)))
     (if rev (string-append "-" (number->string rev)) ""))))
#+end_src

** ~parse-druix-version~

As luck would have it, both my starting git repos have a tag that defines the
version. ~"v0.16-187-g7e8b4baa"~ for gerbil and ~"v4.9.3-1413-g89609f52"~ for
gambit.

It seems that is ~<tag>-<revision>-<commit>~. The [[#druixVersionGit][~<druix-version-git>~ subclass]]
takes care of the commit, and our ~<druix-version>~ does not have such a thing,
so that can be ignored.

#+begin_src scheme :noweb-ref alist-parse-dv
(define (alist<-parse-druix-version str)
  (define version '())
  (define semantic '(major minor patch))
  (define (vnum s start)
    (string-match "^[v|\\.]([0-9]+)" s start))
  (define (rev s start)
    (string-match "-([0-9]+)-" s start))
  (let vnums ((t semantic)
              (start 0))
    (define m?
      (if (eq? #t t)
          ;; not on revision and failed
          #f
          (if (null? t)
              ;; done semantic, onto revision
              (rev str start)
              ;; semantic version
              (vnum str start))))
    (if (not m?)
        (if (not (null? t))
            ;;; try for revision which is always there.
            (vnums '() start)
            (if (null? version) #f (reverse version)))
        ;;; there was a match! put it in versions and continue
        (let ((n (eval-string (match:substring m? 1)))
              (s (match:end m?)))
          (set! version
                (cons* (cons (if (null? t) 'revision (car t)) n)
                       version))
          (vnums (or (null? t) (cdr t)) s)))))
#+end_src

** ~druix-version<-git-repo~
:PROPERTIES:
:CUSTOM_ID: druixVersionGitRepo
:END:

Now that we have that, using a bunch of [[file:utils.org][(druix utils)]] we can make a [[*~<druix-version-git>~
 subclass][~<druix-version-git>~]] from the most recent commit by default, or whatever the
passed checkout (~repo-or-uri~) has.

#+begin_src scheme :noweb-ref druix-version<-git-repo
(define (druix-version<-git-repo klass repo-or-uri . uri-args)
  (define grepo (apply ensure-git-repo repo-or-uri uri-args))
  (define gbranch (with-directory-excursion grepo
      ($cmd "git" "branch" "--show-current")))
  (define vrev
    (string->number
     (with-directory-excursion grepo
      ($cmd "git" "rev-list" gbranch "--count"))))
  (define gcommit (git-repo-current-commit grepo))

  (define gdesc (git-repo-describe--tags grepo))
  (define valist (catch #t (lambda ()
                             (alist<-parse-druix-version gdesc))
                       (lambda _ `((revision . ,vrev)))))

  (define gsha256 (sha256<-directory grepo))
  (define vrepo
    (with-directory-excursion grepo
      ($cmd "git" "remote" "get-url" "origin")))
  (define gymd
    (with-directory-excursion grepo
      ($cmd "sh" "-c" "TZ=UTC git show --quiet --date='format-local:%Y%m%d' --format=%cd")))
  (define ghms
    (with-directory-excursion grepo
      ($cmd "sh" "-c" "TZ=UTC git show --quiet --date='format-local:%H%M%S' --format=%cd")))

  (make klass
    #:major (assoc-ref valist 'major)
    #:minor (assoc-ref valist 'minor)
    #:patch (assoc-ref valist 'patch)
    #:revision (assoc-ref valist 'revision)
    #:ymd (string->number gymd)
    #:hms (string->number ghms)
    #:repo vrepo
    #:commit gcommit
    #:sha256 gsha256))
#+end_src

()
** ~form-<druix-version~, metatime!

This remakes a ~make <class> initargs ...~ form.

#+begin_src scheme :noweb-ref form-from
(define-generic form<-druix-version)
(define-method (form<-druix-version (v <druix-version>))
  (define slots
    (filter (lambda (sd)
              (slot-bound? v (slot-definition-name sd)))
            (filter slot-definition-init-keyword
                    (class-slots (class-of v)))))

  `(make ,(class-name (class-of v))
     ,@(let sdv ((sds slots))
    (if (null? sds) sds
        (let ((sd (car sds)))
          (cons* (slot-definition-init-keyword sd)
                 (slot-ref v (slot-definition-name sd))
                 (sdv (cdr sds))))))))

#+end_src

** ~<druix-version-git>~ subclass
:PROPERTIES:
:CUSTOM_ID: druixVersionGit
:END:

#+begin_src scheme :noweb-ref druix-version-git-class
(define-class <druix-version-git> (<druix-version>)
  (repo #:accessor repo #:init-keyword #:repo)
  (commit #:accessor commit #:init-keyword #:commit))

(define-method (druix-version (v <druix-version-git>))
  (define c (string-copy (commit v) 0 8))
  (string-append (next-method) "-g" c))
#+end_src


* ~generate-version-file~

The entire point behind this code is to avoid needing to do something similar the following /for every new commit in all unstable releases/.

#+begin_src shell
cd `mktemp -d`
git clone --depth=1 https://github.com/gambit/gambit.git
cd gambit

_GambcCommit=`git log -1 --format="%H"`
_Gambc256=$(guix hash -xr "`pwd`")
echo commit: $_GambcCommit ; echo sha256: $_Gambc256
#+end_src

*=>*
| commit: | 0902421dbbdab0f039ca997861adb0e1f754b463             |
| sha256: | 13f9xdi871213p2dbxi4p6kynydhjm7mgqcay149n8dwl6wnz2ih |

In fact, if you notice, those numbers are different than our initial [[#versionFirstCase][First Case]],
which means that this is exactly what we want to generate our new version!

** ~define-module-form<-druix-version~

The file starts with a ~define-module~

#+begin_src scheme :noweb-ref define-module-form
(define (form<-define-versions-module name)
  `(define-module
     (druix versions ,(if (string? name) (string->symbol name) name))
     #:use-module (druix versions)
     #:use-module (oop goops)
     #:export (versions latest)))
#+end_src

Let's try it out.

#+begin_src scheme
> (form<-define-versions-module 'gambit-c-unstable)
=> (define-module (druix versions gambit-c-unstable)
     #:use-module (druix versions)
     #:use-module (oop goops)
     #:export (versions latest))
#+end_src

** ~string<-druix-versions~.

#+begin_src scheme :noweb-ref update-druix-version
(define (string<-druix-versions vs)
  (with-output-to-string
    (lambda ()
      (display "(define versions \n  (list \n")
      (let ((one #t))
      (map (lambda (form)
             (if (not one) (newline) (set! one #f))
             (display "    ")
             (pretty-print form))
           (map form<-druix-version vs))
      (display "))")
      (newline)))))
#+end_src



* /File/ ~druix/versions.scm~

#+begin_src scheme :noweb yes :tangle ../druix/versions.scm
(define-module (druix versions)
  #:use-module (oop goops)
  #:use-module (druix utils)
  #:use-module (ice-9 textual-ports)
  #:use-module (ice-9 regex)
  #:use-module (guix build utils)
  #:use-module (ice-9 pretty-print)
  #:export
  (<druix-version>
   major minor patch revision ymd hms sha256

   <druix-version-git>
   repo commit

   alist<-parse-druix-version
   druix-version<-git-repo

   druix-version
   form<-druix-version
   form<-define-versions-module
   string<-druix-module-definition

   ensure-druix-versions

   update-druix-version update-druix-versions
   find-druix-versions

   string<-druix-versions
   new-versions-file-values<-druix-package-name))

<<druix-version-class>>
<<druix-version-fn>>

<<form-from>>
<<druix-version-git-class>>

<<define-module-form>>

<<update-druix-version>>

<<alist-parse-dv>>

<<druix-version<-git-repo>>

<<string<-druix-module-definition>>

<<and-ensure-druix-versions>>
<<ensure-druix-versions>>

#+end_src

* Footnotes
[fn:1] Make a bug report or even better a PR if it does not work :)

[fn:0] https://cons.io

#  LocalWords:  druix repo src oop goops fn sha noweb ref sname klass args ymd
#  LocalWords:  hms yq bf pr pz sgwhr xhalsz pm gl ig wx ac dc edc repos guix
#  LocalWords:  druixVersionGitRepo pkg dirname dvp eval vfldr fname scm sym nv
#  LocalWords:  obj vpath oldvs newv restvs cdr Versioning versioning mkdirp xf
#  LocalWords:  versionFirstCase zyvs qazqbqczbsspqrz vzsabg kbz xxxvkqimc init
#  LocalWords:  dbaabfd bbdfae accessor rev baa druixVersionGit alist dv str
